{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { HYDRATE } from \"next-redux-wrapper\";\nimport { combineReducers } from 'redux'; // user, post reducer들을 불러온다\n\nimport user from './user';\nimport post from './post'; // reducer: (이전상태, 액션) => return 다음상태\n// combineReducers로 reducer들을 합친다. // reducer들은 함수니까 함수를 합치는 과정.\n\nconst rootReducer = combineReducers({\n  // SSR을 위한 HYDRATE를 위해 추가한 index reducer 추가\n  index: (state = {}, action) => {\n    switch (action.type) {\n      case HYDRATE:\n        console.log('HYDATE:', HYDRATE);\n        return _objectSpread(_objectSpread({}, state), action.payload);\n      // 최초 초기화 시점을 위한 코드\n\n      default:\n        return state;\n    }\n  },\n  user,\n  post\n});\nexport default rootReducer;","map":{"version":3,"sources":["/Users/seolranlee/study/react-nodebird/front/reducers/index.js"],"names":["HYDRATE","combineReducers","user","post","rootReducer","index","state","action","type","console","log","payload"],"mappings":";;;;;;AAAA,SAASA,OAAT,QAAwB,oBAAxB;AACA,SAASC,eAAT,QAAgC,OAAhC,C,CAEA;;AACA,OAAOC,IAAP,MAAiB,QAAjB;AACA,OAAOC,IAAP,MAAiB,QAAjB,C,CAEA;AACA;;AACA,MAAMC,WAAW,GAAGH,eAAe,CAAC;AAClC;AACAI,EAAAA,KAAK,EAAE,CAACC,KAAK,GAAG,EAAT,EAAaC,MAAb,KAAwB;AAC7B,YAAQA,MAAM,CAACC,IAAf;AACE,WAAKR,OAAL;AACES,QAAAA,OAAO,CAACC,GAAR,CAAY,SAAZ,EAAuBV,OAAvB;AACA,+CAAYM,KAAZ,GAAsBC,MAAM,CAACI,OAA7B;AACF;;AACA;AACE,eAAOL,KAAP;AANJ;AAQD,GAXiC;AAYlCJ,EAAAA,IAZkC;AAalCC,EAAAA;AAbkC,CAAD,CAAnC;AAgBA,eAAeC,WAAf","sourcesContent":["import { HYDRATE } from \"next-redux-wrapper\"\nimport { combineReducers } from 'redux'\n\n// user, post reducer들을 불러온다\nimport user from './user'\nimport post from './post'\n\n// reducer: (이전상태, 액션) => return 다음상태\n// combineReducers로 reducer들을 합친다. // reducer들은 함수니까 함수를 합치는 과정.\nconst rootReducer = combineReducers({\n  // SSR을 위한 HYDRATE를 위해 추가한 index reducer 추가\n  index: (state = {}, action) => {\n    switch (action.type) {\n      case HYDRATE:\n        console.log('HYDATE:', HYDRATE)\n        return { ...state, ...action.payload }\n      // 최초 초기화 시점을 위한 코드\n      default:\n        return state\n    }\n  },\n  user,\n  post,\n})\n\nexport default rootReducer"]},"metadata":{},"sourceType":"module"}