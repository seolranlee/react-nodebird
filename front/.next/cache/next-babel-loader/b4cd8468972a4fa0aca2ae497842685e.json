{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\n\nvar _jsxFileName = \"/Users/seolranlee/study/react-nodebird/front/components/CommentForm.js\",\n    _this = this,\n    _s = $RefreshSig$();\n\nimport React, { useCallback, useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport { Form, Input, Button } from 'antd';\nimport useInput from '../hooks/useInput';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { ADD_COMMENT_REQUEST } from '../reducers/post';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar CommentForm = function CommentForm(_ref) {\n  _s();\n\n  var post = _ref.post;\n  var id = useSelector(function (state) {\n    var _state$user$me;\n\n    return (_state$user$me = state.user.me) === null || _state$user$me === void 0 ? void 0 : _state$user$me.id;\n  });\n\n  var _useSelector = useSelector(function (state) {\n    return state.post;\n  }),\n      addCommentDone = _useSelector.addCommentDone;\n\n  var _useInput = useInput(''),\n      _useInput2 = _slicedToArray(_useInput, 3),\n      commentText = _useInput2[0],\n      onChangeCommentText = _useInput2[1],\n      setCommentText = _useInput2[2];\n\n  useEffect(function () {\n    if (addCommentDone) setCommentText('');\n  }, [addCommentDone]);\n  var dispatch = useDispatch();\n  var onSubmitComment = useCallback(function () {\n    // post를 props로 받아온 이유: 게시글 id아래에 댓글을 달거기 때문에\n    dispatch({\n      type: ADD_COMMENT_REQUEST,\n      data: {\n        content: commentText,\n        postId: post.id,\n        userId: id\n      }\n    });\n  }, [commentText, id]);\n  return /*#__PURE__*/_jsxDEV(Form, {\n    onFinish: onSubmitComment,\n    children: /*#__PURE__*/_jsxDEV(Form.Item, {\n      style: {\n        position: 'relative',\n        margin: 0\n      },\n      children: [/*#__PURE__*/_jsxDEV(Input.TextArea, {\n        value: commentText,\n        onChange: onChangeCommentText,\n        rows: 4\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 29,\n        columnNumber: 9\n      }, _this), /*#__PURE__*/_jsxDEV(Button, {\n        style: {\n          position: 'absolute',\n          right: 8,\n          bottom: -48,\n          zIndex: 1\n        },\n        type: \"primary\",\n        htmlType: \"submit\",\n        loading: addCommentLoading,\n        children: \"write\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 30,\n        columnNumber: 9\n      }, _this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 7\n    }, _this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 27,\n    columnNumber: 5\n  }, _this);\n};\n\n_s(CommentForm, \"7cgdo425Cj7DWuwadfn+dhCkrE8=\", false, function () {\n  return [useSelector, useSelector, useInput, useDispatch];\n});\n\n_c = CommentForm;\nCommentForm.propTypes = {\n  post: PropTypes.object.isRequired\n};\nexport default CommentForm;\n\nvar _c;\n\n$RefreshReg$(_c, \"CommentForm\");","map":{"version":3,"sources":["/Users/seolranlee/study/react-nodebird/front/components/CommentForm.js"],"names":["React","useCallback","useEffect","PropTypes","Form","Input","Button","useInput","useDispatch","useSelector","ADD_COMMENT_REQUEST","CommentForm","post","id","state","user","me","addCommentDone","commentText","onChangeCommentText","setCommentText","dispatch","onSubmitComment","type","data","content","postId","userId","position","margin","right","bottom","zIndex","addCommentLoading","propTypes","object","isRequired"],"mappings":";;;;;;AAAA,OAAOA,KAAP,IAAgBC,WAAhB,EAA6BC,SAA7B,QAA8C,OAA9C;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,SAASC,IAAT,EAAeC,KAAf,EAAsBC,MAAtB,QAAoC,MAApC;AACA,OAAOC,QAAP,MAAqB,mBAArB;AACA,SAASC,WAAT,EAAsBC,WAAtB,QAAyC,aAAzC;AACA,SAASC,mBAAT,QAAoC,kBAApC;;;AAEA,IAAMC,WAAW,GAAG,SAAdA,WAAc,OAAc;AAAA;;AAAA,MAAXC,IAAW,QAAXA,IAAW;AAChC,MAAMC,EAAE,GAAGJ,WAAW,CAAC,UAACK,KAAD;AAAA;;AAAA,6BAAWA,KAAK,CAACC,IAAN,CAAWC,EAAtB,mDAAW,eAAeH,EAA1B;AAAA,GAAD,CAAtB;;AACA,qBAA2BJ,WAAW,CAAC,UAACK,KAAD;AAAA,WAAWA,KAAK,CAACF,IAAjB;AAAA,GAAD,CAAtC;AAAA,MAAQK,cAAR,gBAAQA,cAAR;;AACA,kBAA2DV,QAAQ,CAAC,EAAD,CAAnE;AAAA;AAAA,MAAOW,WAAP;AAAA,MAAoBC,mBAApB;AAAA,MAAyCC,cAAzC;;AAEAlB,EAAAA,SAAS,CAAC,YAAM;AACd,QAAIe,cAAJ,EAAoBG,cAAc,CAAC,EAAD,CAAd;AACrB,GAFQ,EAEN,CAACH,cAAD,CAFM,CAAT;AAIA,MAAMI,QAAQ,GAAGb,WAAW,EAA5B;AACA,MAAMc,eAAe,GAAGrB,WAAW,CAAC,YAAM;AACxC;AACAoB,IAAAA,QAAQ,CAAC;AACPE,MAAAA,IAAI,EAAEb,mBADC;AAEPc,MAAAA,IAAI,EAAE;AAAEC,QAAAA,OAAO,EAAEP,WAAX;AAAwBQ,QAAAA,MAAM,EAAEd,IAAI,CAACC,EAArC;AAAyCc,QAAAA,MAAM,EAAEd;AAAjD;AAFC,KAAD,CAAR;AAID,GANkC,EAMhC,CAACK,WAAD,EAAcL,EAAd,CANgC,CAAnC;AAQA,sBACE,QAAC,IAAD;AAAM,IAAA,QAAQ,EAAES,eAAhB;AAAA,2BACE,QAAC,IAAD,CAAM,IAAN;AAAW,MAAA,KAAK,EAAE;AAAEM,QAAAA,QAAQ,EAAE,UAAZ;AAAwBC,QAAAA,MAAM,EAAE;AAAhC,OAAlB;AAAA,8BACE,QAAC,KAAD,CAAO,QAAP;AAAgB,QAAA,KAAK,EAAEX,WAAvB;AAAoC,QAAA,QAAQ,EAAEC,mBAA9C;AAAmE,QAAA,IAAI,EAAE;AAAzE;AAAA;AAAA;AAAA;AAAA,eADF,eAEE,QAAC,MAAD;AAAQ,QAAA,KAAK,EAAE;AAAES,UAAAA,QAAQ,EAAE,UAAZ;AAAwBE,UAAAA,KAAK,EAAE,CAA/B;AAAkCC,UAAAA,MAAM,EAAE,CAAC,EAA3C;AAA+CC,UAAAA,MAAM,EAAE;AAAvD,SAAf;AAA2E,QAAA,IAAI,EAAC,SAAhF;AAA0F,QAAA,QAAQ,EAAC,QAAnG;AAA4G,QAAA,OAAO,EAAEC,iBAArH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eAFF;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,WADF;AAQD,CA1BD;;GAAMtB,W;UACOF,W,EACgBA,W,EACgCF,Q,EAM1CC,W;;;KATbG,W;AA4BNA,WAAW,CAACuB,SAAZ,GAAwB;AACtBtB,EAAAA,IAAI,EAAET,SAAS,CAACgC,MAAV,CAAiBC;AADD,CAAxB;AAIA,eAAezB,WAAf","sourcesContent":["import React, { useCallback, useEffect } from 'react'\nimport PropTypes from 'prop-types'\nimport { Form, Input, Button } from 'antd'\nimport useInput from '../hooks/useInput'\nimport { useDispatch, useSelector } from 'react-redux'\nimport { ADD_COMMENT_REQUEST } from '../reducers/post'\n\nconst CommentForm = ({ post }) => {  \n  const id = useSelector((state) => state.user.me?.id)\n  const { addCommentDone } = useSelector((state) => state.post)\n  const [commentText, onChangeCommentText, setCommentText] = useInput('')\n  \n  useEffect(() => {\n    if (addCommentDone) setCommentText('')\n  }, [addCommentDone])\n\n  const dispatch = useDispatch()\n  const onSubmitComment = useCallback(() => {\n    // post를 props로 받아온 이유: 게시글 id아래에 댓글을 달거기 때문에\n    dispatch({\n      type: ADD_COMMENT_REQUEST,\n      data: { content: commentText, postId: post.id, userId: id }\n    })\n  }, [commentText, id])\n\n  return (\n    <Form onFinish={onSubmitComment}>\n      <Form.Item style={{ position: 'relative', margin: 0 }}>\n        <Input.TextArea value={commentText} onChange={onChangeCommentText} rows={4} />\n        <Button style={{ position: 'absolute', right: 8, bottom: -48, zIndex: 1 }} type=\"primary\" htmlType=\"submit\" loading={addCommentLoading}>write</Button>\n      </Form.Item>\n    </Form>\n  )\n}\n\nCommentForm.propTypes = {\n  post: PropTypes.object.isRequired\n}\n\nexport default CommentForm"]},"metadata":{},"sourceType":"module"}