{"ast":null,"code":"import { all, fork, call, put, takeLatest, delay } from \"@redux-saga/core/effects\";\nimport axios from 'axios';\nimport { LOG_IN_REQUEST, LOG_IN_SUCCESS, LOG_IN_FAILURE, LOG_OUT_REQUEST, LOG_OUT_SUCCESS, LOG_OUT_FAILURE, SIGN_UP_REQUEST, SIGN_UP_SUCCESS, SIGN_UP_FAILURE } from '../reducers/user'; // 서버에 요청하는 함수는 일반 함수!!!\n// login\n\nfunction loginAPI(data) {\n  return axios.post('/api/login', data);\n}\n\nfunction* logIn(action) {\n  try {\n    console.log('saga login'); // call: 동기 함수 호출: 결과값을 기다리고 다음 줄로 넘어간다. await이랑 비슷하다고 생각\n    // fork: 비동기 함수 호출(non-blocking): 결과값을 기다리지 않고 다음 줄로 넘어간다.\n    // const result = yield call(loginAPI, action.data) // call을 써야 한다!!\n\n    yield delay(1000); // 서버 구현 전까지 비동기적인 효과를 위해\n    // effect앞에는 항상 yield를 붙인다.\n    // put은 dispatch.\n\n    yield put( // action 객체\n    {\n      type: LOG_IN_SUCCESS,\n      data: action.data\n    }); // const result = yield fork(loginAPI)\n  } catch (err) {\n    yield put({\n      type: LOG_IN_FAILURE,\n      error: err.response.data\n    });\n  }\n}\n\nfunction* watchLogin() {\n  // 'LOGIN'이라는 액션이 들어오면 logIn generator 함수를 실행한다.\n  // eventListner와 유사한 느낌\n  // yield take의 치명적인 단점: 1회용임. 한번 로그인 후에는 사라진다. 해결하는 방법? => generator 무한\n  // yield take('LOG_IN_REQUEST', logIn)\n  // while (true) {  // while로 감싸면 무한하게 실행된다.\n  //   yield take('LOG_IN_REQUEST', logIn)\n  // }\n  // while take는 동기적으로 동작하지만 takeEvery는 비동기적으로 동작\n  // yield takeEvery('LOG_IN_REQUEST', logIn)\n  // takeLatest: 사용자가 오동작으로 2회 이상 눌렀을 때, takeEvery는 2회 모두 실행된다면 takeLatest는 앞의 오동작은 무시되고 마지막 것만 동작. 보통은 takeLatest를 많이 해둔다.\n  // 치명적 단점: 응답을 취소하지 서버에 보내는 요청을 취소하진 못함 => 보통 서버쪽에서 검증하는 편. 그래서 보통 클라이언트에서는 takeLatest를 주로 쓴다.\n  yield takeLatest(LOG_IN_REQUEST, logIn); // 2초동안에 로그인은 한번만 요청\n  // yield throttle('LOG_IN_REQUEST', logIn, 2000)\n} // logout\n\n\nfunction logoutAPI() {\n  return axios.post('/api/logout');\n}\n\nfunction* logOut() {\n  try {\n    console.log('saga loginOut'); // const result = yield call(logoutAPI)\n\n    yield delay(1000);\n    yield put({\n      type: LOG_OUT_SUCCESS\n    });\n  } catch (err) {\n    yield put({\n      type: LOG_OUT_FAILURE,\n      error: err.response.data\n    });\n  }\n} // signUp\n\n\nfunction signUpAPI() {\n  return axios.post('/api/signUp');\n}\n\nfunction* signUp() {\n  try {\n    // const result = yield call(signUpAPI)\n    yield delay(1000);\n    yield put({\n      type: SIGN_UP_SUCCESS\n    });\n  } catch (err) {\n    yield put({\n      type: SIGN_UP_FAILURE,\n      error: err.response.data\n    });\n  }\n}\n\nfunction* watchLogOut() {\n  yield takeLatest(LOG_OUT_REQUEST, logOut);\n}\n\nfunction* watchSignUp() {\n  yield takeLatest(SIGN_UP_REQUEST, signUp);\n}\n\nexport default function* userSaga() {\n  yield all([fork(watchLogin), fork(watchLogOut), fork(watchSignUp)]);\n}","map":{"version":3,"sources":["/Users/seolranlee/study/react-nodebird/front/sagas/user.js"],"names":["all","fork","call","put","takeLatest","delay","axios","LOG_IN_REQUEST","LOG_IN_SUCCESS","LOG_IN_FAILURE","LOG_OUT_REQUEST","LOG_OUT_SUCCESS","LOG_OUT_FAILURE","SIGN_UP_REQUEST","SIGN_UP_SUCCESS","SIGN_UP_FAILURE","loginAPI","data","post","logIn","action","console","log","type","err","error","response","watchLogin","logoutAPI","logOut","signUpAPI","signUp","watchLogOut","watchSignUp","userSaga"],"mappings":"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","sourcesContent":["import { all, fork, call, put, takeLatest, delay } from \"@redux-saga/core/effects\";\nimport axios from 'axios'\nimport { \n  LOG_IN_REQUEST, LOG_IN_SUCCESS, LOG_IN_FAILURE, \n  LOG_OUT_REQUEST, LOG_OUT_SUCCESS, LOG_OUT_FAILURE, \n  SIGN_UP_REQUEST, SIGN_UP_SUCCESS, SIGN_UP_FAILURE\n} from '../reducers/user'\n\n// 서버에 요청하는 함수는 일반 함수!!!\n// login\nfunction loginAPI(data) {\n  return axios.post('/api/login', data)\n}\n\nfunction* logIn(action) {\n  try {\n    console.log('saga login')\n    // call: 동기 함수 호출: 결과값을 기다리고 다음 줄로 넘어간다. await이랑 비슷하다고 생각\n    // fork: 비동기 함수 호출(non-blocking): 결과값을 기다리지 않고 다음 줄로 넘어간다.\n    // const result = yield call(loginAPI, action.data) // call을 써야 한다!!\n\n    yield delay(1000) // 서버 구현 전까지 비동기적인 효과를 위해\n    // effect앞에는 항상 yield를 붙인다.\n    // put은 dispatch.\n    yield put(\n      // action 객체\n      {\n        type: LOG_IN_SUCCESS,\n        data: action.data\n      }\n    )\n    // const result = yield fork(loginAPI)\n  } catch (err) {\n    yield put({\n      type: LOG_IN_FAILURE,\n      error: err.response.data\n    })\n  }\n}\n\nfunction* watchLogin() {\n  // 'LOGIN'이라는 액션이 들어오면 logIn generator 함수를 실행한다.\n  // eventListner와 유사한 느낌\n  // yield take의 치명적인 단점: 1회용임. 한번 로그인 후에는 사라진다. 해결하는 방법? => generator 무한\n  // yield take('LOG_IN_REQUEST', logIn)\n  \n  // while (true) {  // while로 감싸면 무한하게 실행된다.\n  //   yield take('LOG_IN_REQUEST', logIn)\n  // }\n  \n  // while take는 동기적으로 동작하지만 takeEvery는 비동기적으로 동작\n  // yield takeEvery('LOG_IN_REQUEST', logIn)\n\n  // takeLatest: 사용자가 오동작으로 2회 이상 눌렀을 때, takeEvery는 2회 모두 실행된다면 takeLatest는 앞의 오동작은 무시되고 마지막 것만 동작. 보통은 takeLatest를 많이 해둔다.\n  // 치명적 단점: 응답을 취소하지 서버에 보내는 요청을 취소하진 못함 => 보통 서버쪽에서 검증하는 편. 그래서 보통 클라이언트에서는 takeLatest를 주로 쓴다.\n  yield takeLatest(LOG_IN_REQUEST, logIn)\n\n  // 2초동안에 로그인은 한번만 요청\n  // yield throttle('LOG_IN_REQUEST', logIn, 2000)\n\n}\n\n// logout\nfunction logoutAPI() {\n  return axios.post('/api/logout')\n}\n\nfunction* logOut() {\n  try {\n    console.log('saga loginOut')\n    // const result = yield call(logoutAPI)\n    yield delay(1000)\n    yield put({\n      type: LOG_OUT_SUCCESS,\n    })\n  } catch (err) {\n    yield put({\n      type: LOG_OUT_FAILURE,\n      error: err.response.data\n    })\n  }\n}\n\n\n// signUp\nfunction signUpAPI() {\n  return axios.post('/api/signUp')\n}\n\nfunction* signUp() {\n  try {\n    // const result = yield call(signUpAPI)\n    yield delay(1000)\n    yield put({\n      type: SIGN_UP_SUCCESS,\n    })\n  } catch (err) {\n    yield put({\n      type: SIGN_UP_FAILURE,\n      error: err.response.data\n    })\n  }\n}\n\nfunction* watchLogOut() {\n  yield takeLatest(LOG_OUT_REQUEST, logOut)\n}\n\nfunction* watchSignUp() {\n  yield takeLatest(SIGN_UP_REQUEST, signUp)\n}\n\nexport default function* userSaga() {\n  yield all([\n    fork(watchLogin),\n    fork(watchLogOut),\n    fork(watchSignUp),\n  ])\n}"]},"metadata":{},"sourceType":"module"}