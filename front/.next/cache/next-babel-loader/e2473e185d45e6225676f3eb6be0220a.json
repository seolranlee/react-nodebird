{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\n\nvar _marked = /*#__PURE__*/_regeneratorRuntime.mark(logIn),\n    _marked2 = /*#__PURE__*/_regeneratorRuntime.mark(logOut),\n    _marked3 = /*#__PURE__*/_regeneratorRuntime.mark(watchLogin),\n    _marked4 = /*#__PURE__*/_regeneratorRuntime.mark(watchLogOut),\n    _marked5 = /*#__PURE__*/_regeneratorRuntime.mark(watchAddPosts),\n    _marked6 = /*#__PURE__*/_regeneratorRuntime.mark(rootSaga);\n\nimport { all, fork, call, put, take } from 'redux-saga/effects';\nimport axios from 'axios'; // 서버에 요청하는 함수는 일반 함수!!!\n\nfunction loginAPI() {\n  return axios.post('/api/login');\n}\n\nfunction logIn() {\n  var result;\n  return _regeneratorRuntime.wrap(function logIn$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.prev = 0;\n          _context.next = 3;\n          return put( // action 객체\n          {\n            type: 'LOG_IN_SUCCESS',\n            data: result.data\n          });\n\n        case 3:\n          _context.next = 5;\n          return call(loginAPI);\n\n        case 5:\n          result = _context.sent;\n          _context.next = 12;\n          break;\n\n        case 8:\n          _context.prev = 8;\n          _context.t0 = _context[\"catch\"](0);\n          _context.next = 12;\n          return put({\n            type: 'LOG_IN_FAILURE',\n            data: _context.t0.response.data\n          });\n\n        case 12:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, _marked, null, [[0, 8]]);\n}\n\nfunction logoutAPI() {\n  return axios.post('/api/logout');\n}\n\nfunction logOut() {\n  var result;\n  return _regeneratorRuntime.wrap(function logOut$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          _context2.prev = 0;\n          _context2.next = 3;\n          return put( // action 객체\n          {\n            type: 'LOG_OUT_SUCCESS',\n            data: result.data\n          });\n\n        case 3:\n          _context2.next = 5;\n          return call(logoutAPI);\n\n        case 5:\n          result = _context2.sent;\n          _context2.next = 12;\n          break;\n\n        case 8:\n          _context2.prev = 8;\n          _context2.t0 = _context2[\"catch\"](0);\n          _context2.next = 12;\n          return put({\n            type: 'LOG_OUT_FAILURE',\n            data: _context2.t0.response.data\n          });\n\n        case 12:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, _marked2, null, [[0, 8]]);\n}\n\nfunction watchLogin() {\n  return _regeneratorRuntime.wrap(function watchLogin$(_context3) {\n    while (1) {\n      switch (_context3.prev = _context3.next) {\n        case 0:\n          _context3.next = 2;\n          return take('LOG_IN_REQUEST', logIn);\n\n        case 2:\n        case \"end\":\n          return _context3.stop();\n      }\n    }\n  }, _marked3);\n}\n\nfunction watchLogOut() {\n  return _regeneratorRuntime.wrap(function watchLogOut$(_context4) {\n    while (1) {\n      switch (_context4.prev = _context4.next) {\n        case 0:\n          _context4.next = 2;\n          return take('LOG_OUT_REQUEST', logOut);\n\n        case 2:\n        case \"end\":\n          return _context4.stop();\n      }\n    }\n  }, _marked4);\n}\n\nfunction watchAddPosts() {\n  return _regeneratorRuntime.wrap(function watchAddPosts$(_context5) {\n    while (1) {\n      switch (_context5.prev = _context5.next) {\n        case 0:\n          _context5.next = 2;\n          return take('ADD_POST_REQUEST');\n\n        case 2:\n        case \"end\":\n          return _context5.stop();\n      }\n    }\n  }, _marked5);\n}\n\nexport default function rootSaga() {\n  return _regeneratorRuntime.wrap(function rootSaga$(_context6) {\n    while (1) {\n      switch (_context6.prev = _context6.next) {\n        case 0:\n          _context6.next = 2;\n          return all([// 1) fork나 call로 generator함수를 실행시켜준다\n          fork(watchLogin), // fork !== call \n          fork(watchLogOut), fork(watchAddPosts)]);\n\n        case 2:\n        case \"end\":\n          return _context6.stop();\n      }\n    }\n  }, _marked6);\n}","map":{"version":3,"sources":["/Users/seolranlee/study/react-nodebird/front/sagas/index.js"],"names":["logIn","logOut","watchLogin","watchLogOut","watchAddPosts","rootSaga","all","fork","call","put","take","axios","loginAPI","post","type","data","result","response","logoutAPI"],"mappings":";;oDAQUA,K;qDA2BAC,M;qDAuBAC,U;qDAMAC,W;qDAIAC,a;qDAIeC,Q;;AAxEzB,SAASC,GAAT,EAAcC,IAAd,EAAoBC,IAApB,EAA0BC,GAA1B,EAA+BC,IAA/B,QAA2C,oBAA3C;AACA,OAAOC,KAAP,MAAkB,OAAlB,C,CAEA;;AACA,SAASC,QAAT,GAAoB;AAClB,SAAOD,KAAK,CAACE,IAAN,CAAW,YAAX,CAAP;AACD;;AAED,SAAUb,KAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAII,iBAAMS,GAAG,EACP;AACA;AACEK,YAAAA,IAAI,EAAE,gBADR;AAEEC,YAAAA,IAAI,EAAEC,MAAM,CAACD;AAFf,WAFO,CAAT;;AAJJ;AAAA;AAamB,iBAAMP,IAAI,CAACI,QAAD,CAAV;;AAbnB;AAaUI,UAAAA,MAbV;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAgBI,iBAAMP,GAAG,CAAC;AACRK,YAAAA,IAAI,EAAE,gBADE;AAERC,YAAAA,IAAI,EAAE,YAAIE,QAAJ,CAAaF;AAFX,WAAD,CAAT;;AAhBJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAuBA,SAASG,SAAT,GAAqB;AACnB,SAAOP,KAAK,CAACE,IAAN,CAAW,aAAX,CAAP;AACD;;AAED,SAAUZ,MAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAII,iBAAMQ,GAAG,EACP;AACA;AACEK,YAAAA,IAAI,EAAE,iBADR;AAEEC,YAAAA,IAAI,EAAEC,MAAM,CAACD;AAFf,WAFO,CAAT;;AAJJ;AAAA;AAamB,iBAAMP,IAAI,CAACU,SAAD,CAAV;;AAbnB;AAaUF,UAAAA,MAbV;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAgBI,iBAAMP,GAAG,CAAC;AACRK,YAAAA,IAAI,EAAE,iBADE;AAERC,YAAAA,IAAI,EAAE,aAAIE,QAAJ,CAAaF;AAFX,WAAD,CAAT;;AAhBJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAuBA,SAAUb,UAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAGE,iBAAMQ,IAAI,CAAC,gBAAD,EAAmBV,KAAnB,CAAV;;AAHF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAMA,SAAUG,WAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AACE,iBAAMO,IAAI,CAAC,iBAAD,EAAoBT,MAApB,CAAV;;AADF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAIA,SAAUG,aAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AACE,iBAAMM,IAAI,CAAC,kBAAD,CAAV;;AADF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAIA,eAAe,SAAUL,QAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAEb,iBAAMC,GAAG,CAAC,CACR;AACAC,UAAAA,IAAI,CAACL,UAAD,CAFI,EAEU;AAClBK,UAAAA,IAAI,CAACJ,WAAD,CAHI,EAIRI,IAAI,CAACH,aAAD,CAJI,CAAD,CAAT;;AAFa;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA","sourcesContent":["import { all, fork, call, put, take } from 'redux-saga/effects'\nimport axios from 'axios'\n\n// 서버에 요청하는 함수는 일반 함수!!!\nfunction loginAPI() {\n  return axios.post('/api/login')\n}\n\nfunction* logIn() {\n  try {\n    // effect앞에는 항상 yield를 붙인다.\n    // put은 dispatch.\n    yield put(\n      // action 객체\n      {\n        type: 'LOG_IN_SUCCESS',\n        data: result.data\n      }\n    )\n    // call: 동기 함수 호출: 결과값을 기다리고 다음 줄로 넘어간다. await이랑 비슷하다고 생각\n    // fork: 비동기 함수 호출(non-blocking): 결과값을 기다리지 않고 다음 줄로 넘어간다.\n    const result = yield call(loginAPI) // call을 써야 한다!!\n    // const result = yield fork(loginAPI)\n  } catch (err) {\n    yield put({\n      type: 'LOG_IN_FAILURE',\n      data: err.response.data\n    })\n  }\n}\n\nfunction logoutAPI() {\n  return axios.post('/api/logout')\n}\n\nfunction* logOut() {\n  try {\n    // effect앞에는 항상 yield를 붙인다.\n    // put은 dispatch.\n    yield put(\n      // action 객체\n      {\n        type: 'LOG_OUT_SUCCESS',\n        data: result.data\n      }\n    )\n    // call: 동기 함수 호출: 결과값을 기다리고 다음 줄로 넘어간다. await이랑 비슷하다고 생각\n    // fork: 비동기 함수 호출(non-blocking): 결과값을 기다리지 않고 다음 줄로 넘어간다.\n    const result = yield call(logoutAPI) // call을 써야 한다!!\n    // const result = yield fork(loginAPI)\n  } catch (err) {\n    yield put({\n      type: 'LOG_OUT_FAILURE',\n      data: err.response.data\n    })\n  }\n}\n\nfunction* watchLogin() {\n  // 'LOGIN'이라는 액션이 들어오면 logIn generator 함수를 실행한다.\n  // eventListner와 유사한 느낌\n  yield take('LOG_IN_REQUEST', logIn)\n}\n\nfunction* watchLogOut() {\n  yield take('LOG_OUT_REQUEST', logOut)\n}\n\nfunction* watchAddPosts() {\n  yield take('ADD_POST_REQUEST')\n}\n\nexport default function* rootSaga() {\n  // all을 1) 애들을 동시에 실행할 수 있게 해준다.\n  yield all([\n    // 1) fork나 call로 generator함수를 실행시켜준다\n    fork(watchLogin), // fork !== call \n    fork(watchLogOut),\n    fork(watchAddPosts),\n  ])\n}"]},"metadata":{},"sourceType":"module"}