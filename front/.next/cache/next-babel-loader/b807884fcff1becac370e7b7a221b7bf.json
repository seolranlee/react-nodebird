{"ast":null,"code":"import { all, fork, call, put, take } from 'redux-saga/effects';\nimport axios from 'axios';\n\nfunction loginAPI() {\n  return axios.post('/api/login');\n}\n\nfunction* logIn() {\n  try {\n    const result = yield call(loginAPI);\n    yield put({\n      type: 'LOG_IN_SUCCESS',\n      data: result.data\n    });\n  } catch (err) {}\n}\n\nfunction* watchLogin() {\n  // LOGIN이라는 액션이 실행될 때 까지 login실행을 기다리겠다.\n  yield take('LOGIN', logIn);\n}\n\nfunction* watchLogOut() {\n  yield take('LOG_OUT');\n}\n\nfunction* watchAddPosts() {\n  yield take('ADD_POST');\n}\n\nexport default function* rootSaga() {\n  // all을 1) 애들을 동시에 실행할 수 있게 해준다.\n  yield all([// 1) fork나 call로 generator함수를 실행시켜준다\n  fork(watchLogin), // fork !== call \n  fork(watchLogOut), fork(watchAddPosts)]);\n}","map":{"version":3,"sources":["/Users/seolranlee/study/react-nodebird/front/sagas/index.js"],"names":["all","fork","call","put","take","axios","loginAPI","post","logIn","result","type","data","err","watchLogin","watchLogOut","watchAddPosts","rootSaga"],"mappings":"AAAA,SAASA,GAAT,EAAcC,IAAd,EAAoBC,IAApB,EAA0BC,GAA1B,EAA+BC,IAA/B,QAA2C,oBAA3C;AACA,OAAOC,KAAP,MAAkB,OAAlB;;AACA,SAASC,QAAT,GAAoB;AAClB,SAAOD,KAAK,CAACE,IAAN,CAAW,YAAX,CAAP;AACD;;AAED,UAAUC,KAAV,GAAkB;AAChB,MAAI;AACF,UAAMC,MAAM,GAAG,MAAMP,IAAI,CAACI,QAAD,CAAzB;AACA,UAAMH,GAAG,CAAC;AACRO,MAAAA,IAAI,EAAE,gBADE;AAERC,MAAAA,IAAI,EAAEF,MAAM,CAACE;AAFL,KAAD,CAAT;AAID,GAND,CAME,OAAOC,GAAP,EAAY,CAEb;AACF;;AAED,UAAUC,UAAV,GAAuB;AACrB;AACA,QAAMT,IAAI,CAAC,OAAD,EAAUI,KAAV,CAAV;AACD;;AAED,UAAUM,WAAV,GAAwB;AACtB,QAAMV,IAAI,CAAC,SAAD,CAAV;AACD;;AAED,UAAUW,aAAV,GAA0B;AACxB,QAAMX,IAAI,CAAC,UAAD,CAAV;AACD;;AAED,eAAe,UAAUY,QAAV,GAAqB;AAClC;AACA,QAAMhB,GAAG,CAAC,CACR;AACAC,EAAAA,IAAI,CAACY,UAAD,CAFI,EAEU;AAClBZ,EAAAA,IAAI,CAACa,WAAD,CAHI,EAIRb,IAAI,CAACc,aAAD,CAJI,CAAD,CAAT;AAMD","sourcesContent":["import { all, fork, call, put, take } from 'redux-saga/effects'\nimport axios from 'axios'\nfunction loginAPI() {\n  return axios.post('/api/login')\n}\n\nfunction* logIn() {\n  try {\n    const result = yield call(loginAPI)\n    yield put({\n      type: 'LOG_IN_SUCCESS',\n      data: result.data\n    })\n  } catch (err) {\n\n  }\n}\n\nfunction* watchLogin() {\n  // LOGIN이라는 액션이 실행될 때 까지 login실행을 기다리겠다.\n  yield take('LOGIN', logIn)\n}\n\nfunction* watchLogOut() {\n  yield take('LOG_OUT')\n}\n\nfunction* watchAddPosts() {\n  yield take('ADD_POST')\n}\n\nexport default function* rootSaga() {\n  // all을 1) 애들을 동시에 실행할 수 있게 해준다.\n  yield all([\n    // 1) fork나 call로 generator함수를 실행시켜준다\n    fork(watchLogin), // fork !== call \n    fork(watchLogOut),\n    fork(watchAddPosts),\n  ])\n}"]},"metadata":{},"sourceType":"module"}