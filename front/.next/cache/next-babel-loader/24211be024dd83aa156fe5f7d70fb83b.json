{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { HYDRATE } from \"next-redux-wrapper\";\nconst initialState = {\n  // reducer를 쪼갠 기준: state(user.js, post.js)\n  user: {},\n  post: {\n    mainPosts: []\n  }\n}; // 그때 그때 액션을 만드는 action creater\n\nexport const loginAction = data => {\n  return {\n    type: 'LOG_IN',\n    data\n  };\n};\nexport const logoutAction = () => {\n  return {\n    type: 'LOG_OUT'\n  };\n}; // (이전상태, 액션) => return 다음상태\n\nconst rootReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case HYDRATE:\n      console.log('HYDATE:', HYDRATE);\n      return _objectSpread(_objectSpread({}, state), action.payload);\n\n    case 'LOG_IN':\n      return _objectSpread(_objectSpread({}, state), {}, {\n        user: _objectSpread(_objectSpread({}, state.user), {}, {\n          isLoggedIn: true,\n          user: action.data\n        })\n      });\n\n    case 'LOG_OUT':\n      return _objectSpread(_objectSpread({}, state), {}, {\n        user: _objectSpread(_objectSpread({}, state.user), {}, {\n          isLoggedIn: false,\n          user: null\n        })\n      });\n    // 최초 초기화 시점을 위한 코드\n\n    default:\n      return state;\n  }\n};\n\nexport default rootReducer;","map":{"version":3,"sources":["/Users/seolranlee/study/react-nodebird/front/reducers/index.js"],"names":["HYDRATE","initialState","user","post","mainPosts","loginAction","data","type","logoutAction","rootReducer","state","action","console","log","payload","isLoggedIn"],"mappings":";;;;;;AAAA,SAASA,OAAT,QAAwB,oBAAxB;AAEA,MAAMC,YAAY,GAAG;AACnB;AACAC,EAAAA,IAAI,EAAE,EAFa;AAInBC,EAAAA,IAAI,EAAE;AACJC,IAAAA,SAAS,EAAE;AADP;AAJa,CAArB,C,CASA;;AACA,OAAO,MAAMC,WAAW,GAAIC,IAAD,IAAU;AACnC,SAAO;AACLC,IAAAA,IAAI,EAAE,QADD;AAELD,IAAAA;AAFK,GAAP;AAID,CALM;AAOP,OAAO,MAAME,YAAY,GAAG,MAAM;AAChC,SAAO;AACLD,IAAAA,IAAI,EAAE;AADD,GAAP;AAGD,CAJM,C,CAMP;;AACA,MAAME,WAAW,GAAG,CAACC,KAAK,GAAGT,YAAT,EAAuBU,MAAvB,KAAkC;AACpD,UAAQA,MAAM,CAACJ,IAAf;AACE,SAAKP,OAAL;AACEY,MAAAA,OAAO,CAACC,GAAR,CAAY,SAAZ,EAAuBb,OAAvB;AACA,6CAAYU,KAAZ,GAAsBC,MAAM,CAACG,OAA7B;;AACF,SAAK,QAAL;AACE,6CACKJ,KADL;AAEER,QAAAA,IAAI,kCACCQ,KAAK,CAACR,IADP;AAEFa,UAAAA,UAAU,EAAE,IAFV;AAGFb,UAAAA,IAAI,EAAES,MAAM,CAACL;AAHX;AAFN;;AAQF,SAAK,SAAL;AACE,6CACKI,KADL;AAEER,QAAAA,IAAI,kCACCQ,KAAK,CAACR,IADP;AAEFa,UAAAA,UAAU,EAAE,KAFV;AAGFb,UAAAA,IAAI,EAAE;AAHJ;AAFN;AAQF;;AACA;AACE,aAAOQ,KAAP;AAxBJ;AA0BD,CA3BD;;AA6BA,eAAeD,WAAf","sourcesContent":["import { HYDRATE } from \"next-redux-wrapper\"\n\nconst initialState = {\n  // reducer를 쪼갠 기준: state(user.js, post.js)\n  user: {\n  },\n  post: {\n    mainPosts: []\n  }\n}\n\n// 그때 그때 액션을 만드는 action creater\nexport const loginAction = (data) => {\n  return {\n    type: 'LOG_IN',\n    data\n  }\n}\n\nexport const logoutAction = () => {\n  return {\n    type: 'LOG_OUT'\n  }\n}\n\n// (이전상태, 액션) => return 다음상태\nconst rootReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case HYDRATE:\n      console.log('HYDATE:', HYDRATE)\n      return { ...state, ...action.payload }\n    case 'LOG_IN':\n      return {\n        ...state,\n        user: {\n          ...state.user,\n          isLoggedIn: true,\n          user: action.data\n        }\n      }\n    case 'LOG_OUT':\n      return {\n        ...state,\n        user: {\n          ...state.user,\n          isLoggedIn: false,\n          user: null\n        }\n      }\n    // 최초 초기화 시점을 위한 코드\n    default:\n      return state\n  }\n}\n\nexport default rootReducer"]},"metadata":{},"sourceType":"module"}