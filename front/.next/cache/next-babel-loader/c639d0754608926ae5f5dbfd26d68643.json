{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\n\nvar _initialState;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nexport var initialState = (_initialState = {\n  logInLoading: false,\n  // 로그인 시도중  // 로딩창 UI구현을 위함\n  loginDone: false,\n  loginError: false,\n  logOutLoading: false\n}, _defineProperty(_initialState, \"loginDone\", false), _defineProperty(_initialState, \"loginError\", false), _defineProperty(_initialState, \"me\", null), _defineProperty(_initialState, \"signUpData\", {}), _defineProperty(_initialState, \"loginData\", {}), _initialState); // 변수는 에디터가 관리해주기 때문에 오타가 날 확률이 줄어든다.\n\nexport var LOG_IN_REQUEST = 'LOG_IN_REQUEST';\nexport var LOG_IN_SUCCESS = 'LOG_IN_SUCCESS';\nexport var LOG_IN_FAILURE = 'LOG_IN_FAILURE';\nexport var LOG_OUT_REQUEST = 'LOG_OUT_REQUEST';\nexport var LOG_OUT_SUCCESS = 'LOG_OUT_SUCCESS';\nexport var LOG_OUT_FAILURE = 'LOG_OUT_FAILURE';\nexport var FOLLOW_REQUEST = 'FOLLOW_REQUEST';\nexport var FOLLOW_SUCCESS = 'FOLLOW_SUCCESS';\nexport var FOLLOW_FAILURE = 'FOLLOW_FAILURE';\nexport var UNFOLLOW_REQUEST = 'UNFOLLOW_REQUEST';\nexport var UNFOLLOW_SUCCESS = 'UNFOLLOW_SUCCESS';\nexport var UNFOLLOW_FAILURE = 'UNFOLLOW_FAILURE'; // 그때 그때 액션을 만드는 action creater\n\nexport var loginRequestAction = function loginRequestAction(data) {\n  return {\n    type: LOG_IN_REQUEST,\n    data: data\n  };\n};\nexport var logoutRequestAction = function logoutRequestAction() {\n  return {\n    type: 'LOG_OUT_REQUEST'\n  };\n};\n\nvar reducer = function reducer() {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case LOG_IN_REQUEST:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        logInLoading: true\n      });\n\n    case LOG_IN_SUCCESS:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        logInLoading: false,\n        loginDone: true,\n        me: _objectSpread(_objectSpread({}, action.data), {}, {\n          nickname: 'seolranlee'\n        })\n      });\n\n    case LOG_IN_FAILURE:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        logInLoading: false,\n        loginDone: false\n      });\n\n    case LOG_OUT_REQUEST:\n      console.log('reducer loginOut');\n      return _objectSpread(_objectSpread({}, state), {}, {\n        loginError: true\n      });\n\n    case LOG_OUT_SUCCESS:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        loginError: false,\n        loginDone: false,\n        me: null\n      });\n\n    case LOG_OUT_FAILURE:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        loginError: false,\n        loginDone: false\n      });\n\n    default:\n      return state;\n  }\n};\n\nexport default reducer;","map":{"version":3,"sources":["/Users/seolranlee/study/react-nodebird/front/reducers/user.js"],"names":["initialState","logInLoading","loginDone","loginError","logOutLoading","LOG_IN_REQUEST","LOG_IN_SUCCESS","LOG_IN_FAILURE","LOG_OUT_REQUEST","LOG_OUT_SUCCESS","LOG_OUT_FAILURE","FOLLOW_REQUEST","FOLLOW_SUCCESS","FOLLOW_FAILURE","UNFOLLOW_REQUEST","UNFOLLOW_SUCCESS","UNFOLLOW_FAILURE","loginRequestAction","data","type","logoutRequestAction","reducer","state","action","me","nickname","console","log"],"mappings":";;;;;;;;AAAA,OAAO,IAAMA,YAAY;AACvBC,EAAAA,YAAY,EAAE,KADS;AACF;AACrBC,EAAAA,SAAS,EAAE,KAFY;AAGvBC,EAAAA,UAAU,EAAE,KAHW;AAIvBC,EAAAA,aAAa,EAAE;AAJQ,+CAKZ,KALY,gDAMX,KANW,wCAOnB,IAPmB,gDAQX,EARW,+CASZ,EATY,iBAAlB,C,CAYP;;AACA,OAAO,IAAMC,cAAc,GAAG,gBAAvB;AACP,OAAO,IAAMC,cAAc,GAAG,gBAAvB;AACP,OAAO,IAAMC,cAAc,GAAG,gBAAvB;AAEP,OAAO,IAAMC,eAAe,GAAG,iBAAxB;AACP,OAAO,IAAMC,eAAe,GAAG,iBAAxB;AACP,OAAO,IAAMC,eAAe,GAAG,iBAAxB;AAEP,OAAO,IAAMC,cAAc,GAAG,gBAAvB;AACP,OAAO,IAAMC,cAAc,GAAG,gBAAvB;AACP,OAAO,IAAMC,cAAc,GAAG,gBAAvB;AAEP,OAAO,IAAMC,gBAAgB,GAAG,kBAAzB;AACP,OAAO,IAAMC,gBAAgB,GAAG,kBAAzB;AACP,OAAO,IAAMC,gBAAgB,GAAG,kBAAzB,C,CAGP;;AACA,OAAO,IAAMC,kBAAkB,GAAG,SAArBA,kBAAqB,CAACC,IAAD,EAAU;AAC1C,SAAO;AACLC,IAAAA,IAAI,EAAEd,cADD;AAELa,IAAAA,IAAI,EAAJA;AAFK,GAAP;AAID,CALM;AAOP,OAAO,IAAME,mBAAmB,GAAG,SAAtBA,mBAAsB,GAAM;AACvC,SAAO;AACLD,IAAAA,IAAI,EAAE;AADD,GAAP;AAGD,CAJM;;AAMP,IAAME,OAAO,GAAG,SAAVA,OAAU,GAAkC;AAAA,MAAjCC,KAAiC,uEAAzBtB,YAAyB;AAAA,MAAXuB,MAAW;;AAChD,UAAQA,MAAM,CAACJ,IAAf;AACE,SAAKd,cAAL;AACE,6CACKiB,KADL;AAEErB,QAAAA,YAAY,EAAE;AAFhB;;AAIF,SAAKK,cAAL;AACE,6CACKgB,KADL;AAEErB,QAAAA,YAAY,EAAE,KAFhB;AAGEC,QAAAA,SAAS,EAAE,IAHb;AAIEsB,QAAAA,EAAE,kCAAOD,MAAM,CAACL,IAAd;AAAoBO,UAAAA,QAAQ,EAAE;AAA9B;AAJJ;;AAMF,SAAKlB,cAAL;AACE,6CACKe,KADL;AAEErB,QAAAA,YAAY,EAAE,KAFhB;AAGEC,QAAAA,SAAS,EAAE;AAHb;;AAKF,SAAKM,eAAL;AACEkB,MAAAA,OAAO,CAACC,GAAR,CAAY,kBAAZ;AACA,6CACKL,KADL;AAEEnB,QAAAA,UAAU,EAAE;AAFd;;AAIF,SAAKM,eAAL;AACE,6CACKa,KADL;AAEEnB,QAAAA,UAAU,EAAE,KAFd;AAGED,QAAAA,SAAS,EAAE,KAHb;AAIEsB,QAAAA,EAAE,EAAE;AAJN;;AAMF,SAAKd,eAAL;AACE,6CACKY,KADL;AAEEnB,QAAAA,UAAU,EAAE,KAFd;AAGED,QAAAA,SAAS,EAAE;AAHb;;AAKF;AACE,aAAOoB,KAAP;AAvCJ;AAyCD,CA1CD;;AA4CA,eAAeD,OAAf","sourcesContent":["export const initialState = {\n  logInLoading: false, // 로그인 시도중  // 로딩창 UI구현을 위함\n  loginDone: false,\n  loginError: false,\n  logOutLoading: false, // 로그아웃 시도중  // 로딩창 UI구현을 위함\n  loginDone: false,\n  loginError: false,  // 로그아웃 시도중  // 로딩창 UI구현을 위함\n  me: null,\n  signUpData: {},\n  loginData: {}\n}\n\n// 변수는 에디터가 관리해주기 때문에 오타가 날 확률이 줄어든다.\nexport const LOG_IN_REQUEST = 'LOG_IN_REQUEST'\nexport const LOG_IN_SUCCESS = 'LOG_IN_SUCCESS'\nexport const LOG_IN_FAILURE = 'LOG_IN_FAILURE'\n\nexport const LOG_OUT_REQUEST = 'LOG_OUT_REQUEST'\nexport const LOG_OUT_SUCCESS = 'LOG_OUT_SUCCESS'\nexport const LOG_OUT_FAILURE = 'LOG_OUT_FAILURE'\n\nexport const FOLLOW_REQUEST = 'FOLLOW_REQUEST'\nexport const FOLLOW_SUCCESS = 'FOLLOW_SUCCESS'\nexport const FOLLOW_FAILURE = 'FOLLOW_FAILURE'\n\nexport const UNFOLLOW_REQUEST = 'UNFOLLOW_REQUEST'\nexport const UNFOLLOW_SUCCESS = 'UNFOLLOW_SUCCESS'\nexport const UNFOLLOW_FAILURE = 'UNFOLLOW_FAILURE'\n\n \n// 그때 그때 액션을 만드는 action creater\nexport const loginRequestAction = (data) => {\n  return {\n    type: LOG_IN_REQUEST,\n    data\n  }\n}\n\nexport const logoutRequestAction = () => {\n  return {\n    type: 'LOG_OUT_REQUEST'\n  }\n}\n\nconst reducer = (state = initialState, action) => {\n  switch (action.type) {\n    case LOG_IN_REQUEST:\n      return {\n        ...state,\n        logInLoading: true,\n      }\n    case LOG_IN_SUCCESS:\n      return {\n        ...state,\n        logInLoading: false,\n        loginDone: true,\n        me: { ...action.data, nickname: 'seolranlee' }\n      }\n    case LOG_IN_FAILURE:\n      return {\n        ...state,\n        logInLoading: false,\n        loginDone: false\n      }\n    case LOG_OUT_REQUEST:\n      console.log('reducer loginOut')\n      return {\n        ...state,\n        loginError: true,\n      }\n    case LOG_OUT_SUCCESS:\n      return {\n        ...state,\n        loginError: false,\n        loginDone: false,\n        me: null\n      }\n    case LOG_OUT_FAILURE:\n      return {\n        ...state,\n        loginError: false,\n        loginDone: false,\n      }\n    default:\n      return state\n  }\n}\n\nexport default reducer"]},"metadata":{},"sourceType":"module"}