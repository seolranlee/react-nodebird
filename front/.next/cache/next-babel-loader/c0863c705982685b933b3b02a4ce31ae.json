{"ast":null,"code":"var _jsxFileName = \"/Users/seolranlee/study/react-nodebird/front/components/PostCard.js\";\nimport React, { useCallback, useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { Card, Popover, Button, Avatar, List, Comment } from 'antd';\nimport { EllipsisOutlined, HeartTwoTone, HeartOutlined, MessageOutlined, RetweetOutlined } from '@ant-design/icons';\nimport { useSelector } from 'react-redux';\nimport PostImages from './PostImages';\nimport CommentForm from './CommentForm';\nimport PostCardContent from './PostCardContent';\nimport { REMOVE_POST_REQUEST } from '../reducers/post';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst PostCard = ({\n  post\n}) => {\n  var _post$Images;\n\n  const {\n    0: liked,\n    1: setLiked\n  } = useState(false);\n  const {\n    0: commentFormOpened,\n    1: setCommentFormOpened\n  } = useState(false); // const { me } = useSelector((state) => state.user)\n  // const id = me && me.id와 같은 문법. 옵셔널 체이닝 연산자. me가 있으면 me.id가 할당되고 없으면 undefined 할당\n  // const id = me?.id\n  // const id = useSelector((state) => state.user.me && state.user.me.id)\n\n  const id = useSelector(state => {\n    var _state$user$me;\n\n    return (_state$user$me = state.user.me) === null || _state$user$me === void 0 ? void 0 : _state$user$me.id;\n  });\n  const onToggleLike = useCallback(() => {\n    setLiked(prev => !prev);\n  }, []);\n  const onToggleComment = useCallback(() => {\n    setCommentFormOpened(prev => !prev);\n  }, []);\n  const onRemovePost = useCallback(() => {\n    dispatch({\n      type: REMOVE_POST_REQUEST\n    });\n  });\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      marginBottom: 20\n    },\n    children: [/*#__PURE__*/_jsxDEV(Card, {\n      cover: ((_post$Images = post.Images) === null || _post$Images === void 0 ? void 0 : _post$Images[0]) && /*#__PURE__*/_jsxDEV(PostImages, {\n        images: post.Images\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 37,\n        columnNumber: 36\n      }, this),\n      actions: [/*#__PURE__*/_jsxDEV(RetweetOutlined, {}, \"retweet\", false, {\n        fileName: _jsxFileName,\n        lineNumber: 39,\n        columnNumber: 11\n      }, this), liked ? /*#__PURE__*/_jsxDEV(HeartTwoTone, {\n        twoToneColor: \"#eb2f96\",\n        onClick: onToggleLike\n      }, \"heart\", false, {\n        fileName: _jsxFileName,\n        lineNumber: 41,\n        columnNumber: 15\n      }, this) : /*#__PURE__*/_jsxDEV(HeartOutlined, {\n        onClick: onToggleLike\n      }, \"heart\", false, {\n        fileName: _jsxFileName,\n        lineNumber: 42,\n        columnNumber: 15\n      }, this), /*#__PURE__*/_jsxDEV(MessageOutlined, {\n        onClick: onToggleComment\n      }, \"comment\", false, {\n        fileName: _jsxFileName,\n        lineNumber: 43,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(Popover, {\n        content: /*#__PURE__*/_jsxDEV(Button.Group, {\n          children: id && post.User.id === id ? /*#__PURE__*/_jsxDEV(_Fragment, {\n            children: [/*#__PURE__*/_jsxDEV(Button, {\n              children: \"\\uC218\\uC815\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 48,\n              columnNumber: 21\n            }, this), /*#__PURE__*/_jsxDEV(Button, {\n              tyep: \"danger\",\n              onClick: onRemovePost,\n              children: \"\\uC0AD\\uC81C\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 49,\n              columnNumber: 21\n            }, this)]\n          }, void 0, true) : /*#__PURE__*/_jsxDEV(Button, {\n            children: \"\\uC2E0\\uACE0\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 51,\n            columnNumber: 21\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 45,\n          columnNumber: 13\n        }, this),\n        children: /*#__PURE__*/_jsxDEV(EllipsisOutlined, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 54,\n          columnNumber: 13\n        }, this)\n      }, \"more\", false, {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 11\n      }, this)],\n      children: /*#__PURE__*/_jsxDEV(Card.Meta, {\n        avatar: /*#__PURE__*/_jsxDEV(Avatar, {\n          children: post.User.nickname[0]\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 59,\n          columnNumber: 19\n        }, this),\n        title: post.User.nickname,\n        description: /*#__PURE__*/_jsxDEV(PostCardContent, {\n          postData: post.content\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 61,\n          columnNumber: 24\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 7\n    }, this), commentFormOpened && /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(CommentForm, {\n        post: post\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(List, {\n        header: `${post.Comments.length}개의 댓글`,\n        itemLayout: \"horizontal\",\n        dataSource: post.Comments,\n        renderItem: item => /*#__PURE__*/_jsxDEV(\"li\", {\n          children: /*#__PURE__*/_jsxDEV(Comment, {\n            author: item.User.nickname,\n            avatar: /*#__PURE__*/_jsxDEV(Avatar, {\n              children: item.User.nickname[0]\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 76,\n              columnNumber: 27\n            }, this),\n            content: item.content\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 74,\n            columnNumber: 17\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 73,\n          columnNumber: 15\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 35,\n    columnNumber: 5\n  }, this);\n};\n\nPostCard.propTypes = {\n  // shape: object 타입을 더 자세히 명시해두고 싶을 때 쓴다.\n  post: PropTypes.shape({\n    id: PropTypes.number,\n    User: PropTypes.shape({\n      id: PropTypes.number,\n      nickname: PropTypes.string\n    }),\n    content: PropTypes.string,\n    createdAt: PropTypes.object,\n    // arrayOf(PropTypes.object): 객체들의 배열이라는 뜻\n    Comments: PropTypes.arrayOf(PropTypes.object),\n    Images: PropTypes.arrayOf(PropTypes.object)\n  }).isRequired\n};\nexport default PostCard;","map":{"version":3,"sources":["/Users/seolranlee/study/react-nodebird/front/components/PostCard.js"],"names":["React","useCallback","useState","PropTypes","Card","Popover","Button","Avatar","List","Comment","EllipsisOutlined","HeartTwoTone","HeartOutlined","MessageOutlined","RetweetOutlined","useSelector","PostImages","CommentForm","PostCardContent","REMOVE_POST_REQUEST","PostCard","post","liked","setLiked","commentFormOpened","setCommentFormOpened","id","state","user","me","onToggleLike","prev","onToggleComment","onRemovePost","dispatch","type","marginBottom","Images","User","nickname","content","Comments","length","item","propTypes","shape","number","string","createdAt","object","arrayOf","isRequired"],"mappings":"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","sourcesContent":["import React, { useCallback, useState } from 'react'\nimport PropTypes from 'prop-types'\nimport { Card, Popover, Button, Avatar, List, Comment } from 'antd'\nimport { EllipsisOutlined, HeartTwoTone, HeartOutlined, MessageOutlined, RetweetOutlined } from '@ant-design/icons'\nimport { useSelector } from 'react-redux'\nimport PostImages from './PostImages'\nimport CommentForm from './CommentForm'\nimport PostCardContent from './PostCardContent'\nimport { REMOVE_POST_REQUEST } from '../reducers/post'\n\nconst PostCard = ({ post }) => {\n  const [liked, setLiked] = useState(false)\n  const [commentFormOpened, setCommentFormOpened] = useState(false)\n  // const { me } = useSelector((state) => state.user)\n  // const id = me && me.id와 같은 문법. 옵셔널 체이닝 연산자. me가 있으면 me.id가 할당되고 없으면 undefined 할당\n  // const id = me?.id\n\n  // const id = useSelector((state) => state.user.me && state.user.me.id)\n  const id = useSelector((state) => state.user.me?.id)\n\n  const onToggleLike = useCallback(() => {\n    setLiked((prev) => !prev)\n  }, [])\n  const onToggleComment = useCallback(() => {\n    setCommentFormOpened((prev) => !prev)\n  }, [])\n\n  const onRemovePost = useCallback(() => {\n    dispatch({\n      type: REMOVE_POST_REQUEST,\n    })\n  })\n\n  return (\n    <div style={{ marginBottom: 20 }}>\n      <Card\n        cover={post.Images?.[0] && <PostImages images={post.Images}/>}\n        actions={[\n          <RetweetOutlined key=\"retweet\" />,\n          liked \n            ? <HeartTwoTone twoToneColor=\"#eb2f96\" key=\"heart\" onClick={onToggleLike} /> \n            : <HeartOutlined key=\"heart\" onClick={onToggleLike} />,\n          <MessageOutlined key=\"comment\" onClick={onToggleComment} />,\n          <Popover key=\"more\" content={(\n            <Button.Group>\n              {id && post.User.id === id ? (\n                  <>\n                    <Button>수정</Button>\n                    <Button tyep=\"danger\" onClick={onRemovePost}>삭제</Button>\n                  </>\n                ) : <Button>신고</Button>}\n            </Button.Group>\n          )}>\n            <EllipsisOutlined />\n          </Popover>\n        ]}\n      >\n        <Card.Meta \n          avatar={<Avatar>{post.User.nickname[0]}</Avatar>}\n          title={post.User.nickname}\n          description={<PostCardContent postData={post.content} />}\n        />\n      </Card>\n      {commentFormOpened && (\n        <div>\n          {/* 어떤 게시글에 대한 코멘트인지 알기 위해 post를 prop으로 받는것 */}\n          <CommentForm post={post} />\n          <List \n            header={`${post.Comments.length}개의 댓글`}\n            itemLayout=\"horizontal\"\n            dataSource={post.Comments}\n            renderItem={(item) => (\n              <li>\n                <Comment \n                  author={item.User.nickname}\n                  avatar={<Avatar>{item.User.nickname[0]}</Avatar>}\n                  content={item.content}\n                />\n              </li>\n            )}\n          />\n        </div>\n      )}\n      {/* <CommentForm />\n      <Comments /> */}\n    </div>\n  )\n}\n\nPostCard.propTypes = {\n  // shape: object 타입을 더 자세히 명시해두고 싶을 때 쓴다.\n  post: PropTypes.shape({\n    id: PropTypes.number,\n    User: PropTypes.shape({\n      id: PropTypes.number,\n      nickname: PropTypes.string\n    }),\n    content: PropTypes.string,\n    createdAt: PropTypes.object,\n    // arrayOf(PropTypes.object): 객체들의 배열이라는 뜻\n    Comments: PropTypes.arrayOf(PropTypes.object),\n    Images: PropTypes.arrayOf(PropTypes.object),\n  }).isRequired\n}\nexport default PostCard"]},"metadata":{},"sourceType":"module"}