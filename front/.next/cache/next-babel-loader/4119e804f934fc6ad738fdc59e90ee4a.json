{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/esm/toConsumableArray\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\n// reducer중심으로 생각.\n// 화면이 아니라 데이터를 먼저 구성.\nimport shortId from 'shortid';\nexport var initialState = {\n  mainPosts: [{\n    id: shortId.generate(),\n    User: {\n      id: 1,\n      nickname: 'seolranlee'\n    },\n    content: '첫 번째 게시글 #해시태그 #익스프레스',\n    Images: [{\n      src: 'https://ccdn.lezhin.com/v2/banners/explore_boys/images/17467.webp?updated=1634792020109'\n    }, {\n      src: 'https://ccdn.lezhin.com/v2/banners/explore_boys/images/17630.webp?updated=1635250994567'\n    }, {\n      src: 'https://ccdn.lezhin.com/v2/banners/explore_boys/images/17303.webp?updated=1634553971673s'\n    }],\n    Comments: [{\n      id: shortId.generate(),\n      User: {\n        id: shortId.generate(),\n        nickname: 'user1'\n      },\n      content: '코멘트1'\n    }, {\n      id: shortId.generate(),\n      User: {\n        nickname: 'user2'\n      },\n      content: '코멘트2'\n    }]\n  }],\n  imagePaths: [],\n  addPostLoading: false,\n  addPostDone: false,\n  addPostError: null,\n  addCommentLoading: false,\n  addCommentDone: false,\n  addCommentError: null\n}; // 액션 이름을 상수로 빼둔다=>오타확률을 낮춘다\n\nexport var ADD_POST_REQUEST = 'ADD_POST_REQUEST';\nexport var ADD_POST_SUCCESS = 'ADD_POST_SUCCESS';\nexport var ADD_POST_FAILURE = 'ADD_POST_FAILURE';\nexport var ADD_COMMENT_REQUEST = 'ADD_COMMENT_REQUEST';\nexport var ADD_COMMENT_SUCCESS = 'ADD_COMMENT_SUCCESS';\nexport var ADD_COMMENT_FAILURE = 'ADD_COMMENT_FAILURE';\nexport var addPost = function addPost(data) {\n  return {\n    type: ADD_POST_REQUEST,\n    data: data\n  };\n};\nexport var addComment = function addComment(data) {\n  return {\n    type: ADD_COMMENT_REQUEST,\n    data: data\n  };\n};\n\nvar dummyPost = function dummyPost(data) {\n  return {\n    // 겹치지 않는 랜덤한 아이디를 생성해서 return해주는 npm.\n    id: shortId.generate(),\n    content: data,\n    User: {\n      id: 1,\n      nickname: 'foo'\n    },\n    Images: [],\n    Comments: []\n  };\n};\n\nvar dummyComment = function dummyComment(data) {\n  return {\n    id: shortid.generate(),\n    content: data,\n    User: {\n      id: 1,\n      nickname: 'seolranlee'\n    }\n  };\n};\n\nvar reducer = function reducer() {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case ADD_POST_REQUEST:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        addPostLoading: true,\n        addPostDone: false,\n        addPostError: null\n      });\n\n    case ADD_POST_SUCCESS:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        // dummyPost를 앞에다가 추가해줘야 새로운 게시글이 위에 올라간다.\n        mainPosts: [dummyPost(action.data)].concat(_toConsumableArray(state.mainPosts)),\n        addPostLoading: false,\n        addPostDone: true\n      });\n\n    case ADD_POST_FAILURE:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        addPostLoading: true,\n        addPostError: action.error\n      });\n\n    case ADD_COMMENT_REQUEST:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        addCommentLoading: true,\n        addCommentDone: false,\n        addCommentError: null\n      });\n\n    case ADD_COMMENT_SUCCESS:\n      var postIndex = state.mainPosts.findIndex(function (v) {\n        return v.id === action.data.postId;\n      });\n\n      var post = _objectSpread({}, state.mainPosts[postIndex]);\n\n      post.Comments = [dummyComment(action.data.content)].concat(_toConsumableArray(post.Comments));\n\n      var mainPosts = _toConsumableArray(state.mainPosts);\n\n      mainPosts[postIndex] = post;\n      return _objectSpread(_objectSpread({}, state), {}, {\n        mainPosts: mainPosts,\n        addCommentLoading: false,\n        addCommentDone: true\n      });\n\n    case ADD_COMMENT_FAILURE:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        addCommentLoading: true,\n        addCommentError: action.error\n      });\n\n    default:\n      return state;\n  }\n};\n\nexport default reducer;","map":{"version":3,"sources":["/Users/seolranlee/study/react-nodebird/front/reducers/post.js"],"names":["shortId","initialState","mainPosts","id","generate","User","nickname","content","Images","src","Comments","imagePaths","addPostLoading","addPostDone","addPostError","addCommentLoading","addCommentDone","addCommentError","ADD_POST_REQUEST","ADD_POST_SUCCESS","ADD_POST_FAILURE","ADD_COMMENT_REQUEST","ADD_COMMENT_SUCCESS","ADD_COMMENT_FAILURE","addPost","data","type","addComment","dummyPost","dummyComment","shortid","reducer","state","action","error","postIndex","findIndex","v","postId","post"],"mappings":"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","sourcesContent":["// reducer중심으로 생각.\n// 화면이 아니라 데이터를 먼저 구성.\nimport shortId from 'shortid'\n\nexport const initialState = {\n  mainPosts: [{\n    id: shortId.generate(),\n    User: {\n      id: 1,\n      nickname: 'seolranlee'\n    },\n    content: '첫 번째 게시글 #해시태그 #익스프레스',\n    Images: [\n      {\n        src: 'https://ccdn.lezhin.com/v2/banners/explore_boys/images/17467.webp?updated=1634792020109'\n      },\n      {\n        src: 'https://ccdn.lezhin.com/v2/banners/explore_boys/images/17630.webp?updated=1635250994567'\n      },\n      {\n        src: 'https://ccdn.lezhin.com/v2/banners/explore_boys/images/17303.webp?updated=1634553971673s'\n      }\n    ],\n    Comments: [\n      {\n        id: shortId.generate(),\n        User: {\n          id: shortId.generate(),\n          nickname: 'user1'\n        },\n        content: '코멘트1'\n      },\n      {\n        id: shortId.generate(),\n        User: {\n          nickname: 'user2'\n        },\n        content: '코멘트2'\n      }\n    ]\n  }],\n  imagePaths: [],\n  addPostLoading: false,\n  addPostDone: false,\n  addPostError: null,\n  addCommentLoading: false,\n  addCommentDone: false,\n  addCommentError: null\n}\n\n// 액션 이름을 상수로 빼둔다=>오타확률을 낮춘다\nexport const ADD_POST_REQUEST = 'ADD_POST_REQUEST'\nexport const ADD_POST_SUCCESS = 'ADD_POST_SUCCESS'\nexport const ADD_POST_FAILURE = 'ADD_POST_FAILURE'\n\nexport const ADD_COMMENT_REQUEST = 'ADD_COMMENT_REQUEST'\nexport const ADD_COMMENT_SUCCESS = 'ADD_COMMENT_SUCCESS'\nexport const ADD_COMMENT_FAILURE = 'ADD_COMMENT_FAILURE'\n\nexport const addPost = (data) => ({\n  type: ADD_POST_REQUEST,\n  data\n})\n\nexport const addComment = (data) => ({\n  type: ADD_COMMENT_REQUEST,\n  data\n})\n\nconst dummyPost = (data) => ({\n  // 겹치지 않는 랜덤한 아이디를 생성해서 return해주는 npm.\n  id: shortId.generate(),\n  content: data,\n  User: {\n    id: 1,\n    nickname: 'foo'\n  },\n  Images: [],\n  Comments: []\n})\n\nconst dummyComment = (data) => ({\n  id: shortid.generate(),\n  content: data,\n  User: {\n    id: 1,\n    nickname: 'seolranlee'\n  }\n})\nconst reducer = (state = initialState, action) => {\n  switch (action.type) {\n    case ADD_POST_REQUEST:\n      return {\n        ...state,\n        addPostLoading: true,\n        addPostDone: false,\n        addPostError: null\n      }\n    case ADD_POST_SUCCESS:\n      return {\n        ...state,\n        // dummyPost를 앞에다가 추가해줘야 새로운 게시글이 위에 올라간다.\n        mainPosts: [dummyPost(action.data), ...state.mainPosts],\n        addPostLoading: false,\n        addPostDone: true\n      }\n    case ADD_POST_FAILURE:\n      return {\n        ...state,\n        addPostLoading: true,\n        addPostError: action.error\n      }\n    case ADD_COMMENT_REQUEST:\n      return {\n        ...state,\n        addCommentLoading: true,\n        addCommentDone: false,\n        addCommentError: null\n      }\n    case ADD_COMMENT_SUCCESS:\n      const postIndex = state.mainPosts.findIndex((v) => v.id === action.data.postId)\n      const post = {...state.mainPosts[postIndex]}\n      post.Comments =  [dummyComment(action.data.content), ...post.Comments]\n      const mainPosts = [...state.mainPosts]\n      mainPosts[postIndex] = post\n      return {\n        ...state,\n        mainPosts,\n        addCommentLoading: false,\n        addCommentDone: true\n      }\n    case ADD_COMMENT_FAILURE:\n      return {\n        ...state,\n        addCommentLoading: true,\n        addCommentError: action.error\n      }\n    default:\n      return state\n  }\n}\n\nexport default reducer"]},"metadata":{},"sourceType":"module"}