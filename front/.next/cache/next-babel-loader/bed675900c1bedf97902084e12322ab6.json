{"ast":null,"code":"import { all, fork, call, put, takeLatest, delay } from \"@redux-saga/core/effects\";\nimport axios from 'axios';\nimport { ADD_POST_REQUEST, ADD_POST_SUCCESS, ADD_POST_FAILURE, ADD_COMMENT_REQUEST, ADD_COMMENT_SUCCESS, ADD_COMMENT_FAILURE, REMOVE_POST_REQUEST, REMOVE_POST_SUCCESS, REMOVE_POST_FAILURE } from \"../reducers/post\";\nimport { ADD_POST_TO_ME, REMOVE_POST_OF_ME } from \"../reducers/user\";\nimport shortId from 'shortid'; // addPost\n\nfunction addPostAPI(data) {\n  return axios.post('/api/post', data);\n}\n\nfunction* addPost(action) {\n  try {\n    // const result = yield call(addPostAPI, action.data)\n    yield delay(1000); // 겹치지 않는 랜덤한 아이디를 생성해서 return해주는 npm.\n\n    const id = shortId.generate(); // post reducer 상태 변경\n\n    yield put({\n      type: ADD_POST_SUCCESS,\n      data: {\n        id,\n        content: action.data\n      }\n    }); // ADD_POST_SUCCESS 후 \n    // saga는 동시에 여러 액션을 dispatch할 수 있다.\n    // user reducer 상태 변경\n\n    yield put({\n      type: ADD_POST_TO_ME,\n      data: id\n    });\n  } catch (err) {\n    yield put({\n      type: ADD_POST_FAILURE,\n      error: err.response.data\n    });\n  }\n} // removePost\n\n\nfunction removePostAPI(data) {\n  return axios.delete('/api/post', data);\n}\n\nfunction* removePost(action) {\n  try {\n    // const result = yield call(addPostAPI, action.data)\n    yield delay(1000);\n    yield put({\n      type: REMOVE_POST_SUCCESS,\n      data: action.dtaa\n    }); // ADD_POST_SUCCESS 후 \n    // saga는 동시에 여러 액션을 dispatch할 수 있다.\n\n    yield put({\n      type: REMOVE_POST_OF_ME,\n      data: action.data\n    });\n  } catch (err) {\n    yield put({\n      type: REMOVE_POST_FAILURE,\n      error: err.response.data\n    });\n  }\n} // addComment\n\n\nfunction addCommentAPI(data) {\n  return axios.Comment('/api/post/${data.postId}/comment', data);\n}\n\nfunction* addComment(action) {\n  try {\n    // const result = yield call(addCommentAPI, action.data)\n    yield delay(1000);\n    yield put({\n      type: ADD_COMMENT_SUCCESS,\n      data: action.data\n    });\n  } catch (err) {\n    yield put({\n      type: ADD_COMMENT_FAILURE,\n      error: err.response.data\n    });\n  }\n}\n\nfunction* watchAddPosts() {\n  yield takeLatest(ADD_POST_REQUEST, addPost);\n}\n\nfunction* watchRemovePosts() {\n  yield takeLatest(REMOVE_POST_REQUEST, removePost);\n}\n\nfunction* watchAddComment() {\n  yield takeLatest(ADD_COMMENT_REQUEST, addComment);\n}\n\nexport default function* postSaga() {\n  yield all([fork(watchAddPosts), fork(watchRemovePosts), fork(watchAddComment)]);\n}","map":{"version":3,"sources":["/Users/seolranlee/study/react-nodebird/front/sagas/post.js"],"names":["all","fork","call","put","takeLatest","delay","axios","ADD_POST_REQUEST","ADD_POST_SUCCESS","ADD_POST_FAILURE","ADD_COMMENT_REQUEST","ADD_COMMENT_SUCCESS","ADD_COMMENT_FAILURE","REMOVE_POST_REQUEST","REMOVE_POST_SUCCESS","REMOVE_POST_FAILURE","ADD_POST_TO_ME","REMOVE_POST_OF_ME","shortId","addPostAPI","data","post","addPost","action","id","generate","type","content","err","error","response","removePostAPI","delete","removePost","dtaa","addCommentAPI","Comment","addComment","watchAddPosts","watchRemovePosts","watchAddComment","postSaga"],"mappings":"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","sourcesContent":["import { all, fork, call, put, takeLatest, delay } from \"@redux-saga/core/effects\";\nimport axios from 'axios'\nimport { \n  ADD_POST_REQUEST, ADD_POST_SUCCESS, ADD_POST_FAILURE,\n  ADD_COMMENT_REQUEST, ADD_COMMENT_SUCCESS, ADD_COMMENT_FAILURE, \n  REMOVE_POST_REQUEST, REMOVE_POST_SUCCESS, REMOVE_POST_FAILURE\n} from \"../reducers/post\";\nimport { ADD_POST_TO_ME, REMOVE_POST_OF_ME } from \"../reducers/user\";\nimport shortId from 'shortid'\n\n// addPost\nfunction addPostAPI(data) {\n  return axios.post('/api/post', data)\n}\n\nfunction* addPost(action) {\n  try {\n    // const result = yield call(addPostAPI, action.data)\n    yield delay(1000)\n    // 겹치지 않는 랜덤한 아이디를 생성해서 return해주는 npm.\n    const id = shortId.generate()\n    // post reducer 상태 변경\n    yield put({\n      type: ADD_POST_SUCCESS,\n      data: {\n        id,\n        content: action.data\n      }\n    })\n    // ADD_POST_SUCCESS 후 \n    // saga는 동시에 여러 액션을 dispatch할 수 있다.\n    // user reducer 상태 변경\n    yield put({\n      type: ADD_POST_TO_ME,\n      data: id\n    })\n  } catch (err) {\n    yield put({\n      type: ADD_POST_FAILURE,\n      error: err.response.data\n    })\n  }\n}\n\n// removePost\nfunction removePostAPI(data) {\n  return axios.delete('/api/post', data)\n}\n\nfunction* removePost(action) {\n  try {\n    // const result = yield call(addPostAPI, action.data)\n    yield delay(1000)\n    yield put({\n      type: REMOVE_POST_SUCCESS,\n      data: action.dtaa\n    })\n    // ADD_POST_SUCCESS 후 \n    // saga는 동시에 여러 액션을 dispatch할 수 있다.\n    yield put({\n      type: REMOVE_POST_OF_ME,\n      data: action.data\n    })\n  } catch (err) {\n    yield put({\n      type: REMOVE_POST_FAILURE,\n      error: err.response.data\n    })\n  }\n}\n\n// addComment\nfunction addCommentAPI(data) {\n  return axios.Comment('/api/post/${data.postId}/comment', data)\n}\n\nfunction* addComment(action) {\n  try {\n    // const result = yield call(addCommentAPI, action.data)\n    yield delay(1000)\n    yield put({\n      type: ADD_COMMENT_SUCCESS,\n      data: action.data\n    })\n  } catch (err) {\n    yield put({\n      type: ADD_COMMENT_FAILURE,\n      error: err.response.data\n    })\n  }\n}\n\nfunction* watchAddPosts() {\n  yield takeLatest(ADD_POST_REQUEST, addPost)\n}\n\nfunction* watchRemovePosts() {\n  yield takeLatest(REMOVE_POST_REQUEST, removePost)\n}\n\nfunction* watchAddComment() {\n  yield takeLatest(ADD_COMMENT_REQUEST, addComment)\n}\n\nexport default function* postSaga() {\n  yield all([\n    fork(watchAddPosts),\n    fork(watchRemovePosts),\n    fork(watchAddComment)\n  ])\n}"]},"metadata":{},"sourceType":"module"}