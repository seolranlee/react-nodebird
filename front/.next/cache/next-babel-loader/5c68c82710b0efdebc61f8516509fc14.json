{"ast":null,"code":"import { all, fork, call, put, takeLatest, delay } from \"@redux-saga/core/effects\";\nimport axios from 'axios'; // addPost\n\nfunction addPostAPI(data) {\n  return axios.post('/api/post', data);\n}\n\nfunction* addPost(action) {\n  try {\n    // const result = yield call(addPostAPI, action.data)\n    yield delay(1000);\n    yield put({\n      type: ADD_POST_SUCCESS,\n      data: result.data\n    });\n  } catch (err) {\n    yield put({\n      type: 'ADD_POST_FAILURE',\n      data: err.response.data\n    });\n  }\n}\n\nfunction* watchAddPosts() {\n  yield takeLatest('ADD_POST_REQUEST', addPost);\n}\n\nexport default function* postSaga() {\n  yield all([fork(watchAddPosts)]);\n}","map":{"version":3,"sources":["/Users/seolranlee/study/react-nodebird/front/sagas/post.js"],"names":["all","fork","call","put","takeLatest","delay","axios","addPostAPI","data","post","addPost","action","type","ADD_POST_SUCCESS","result","err","response","watchAddPosts","postSaga"],"mappings":"AAAA,SAASA,GAAT,EAAcC,IAAd,EAAoBC,IAApB,EAA0BC,GAA1B,EAA+BC,UAA/B,EAA2CC,KAA3C,QAAwD,0BAAxD;AACA,OAAOC,KAAP,MAAkB,OAAlB,C,CAEA;;AACA,SAASC,UAAT,CAAoBC,IAApB,EAA0B;AACxB,SAAOF,KAAK,CAACG,IAAN,CAAW,WAAX,EAAwBD,IAAxB,CAAP;AACD;;AAED,UAAUE,OAAV,CAAkBC,MAAlB,EAA0B;AACxB,MAAI;AACF;AACA,UAAMN,KAAK,CAAC,IAAD,CAAX;AACA,UAAMF,GAAG,CAAC;AACRS,MAAAA,IAAI,EAAEC,gBADE;AAERL,MAAAA,IAAI,EAAEM,MAAM,CAACN;AAFL,KAAD,CAAT;AAID,GAPD,CAOE,OAAOO,GAAP,EAAY;AACZ,UAAMZ,GAAG,CAAC;AACRS,MAAAA,IAAI,EAAE,kBADE;AAERJ,MAAAA,IAAI,EAAEO,GAAG,CAACC,QAAJ,CAAaR;AAFX,KAAD,CAAT;AAID;AACF;;AAED,UAAUS,aAAV,GAA0B;AACxB,QAAMb,UAAU,CAAC,kBAAD,EAAqBM,OAArB,CAAhB;AACD;;AAED,eAAe,UAAUQ,QAAV,GAAqB;AAClC,QAAMlB,GAAG,CAAC,CACRC,IAAI,CAACgB,aAAD,CADI,CAAD,CAAT;AAGD","sourcesContent":["import { all, fork, call, put, takeLatest, delay } from \"@redux-saga/core/effects\";\nimport axios from 'axios'\n\n// addPost\nfunction addPostAPI(data) {\n  return axios.post('/api/post', data)\n}\n\nfunction* addPost(action) {\n  try {\n    // const result = yield call(addPostAPI, action.data)\n    yield delay(1000)\n    yield put({\n      type: ADD_POST_SUCCESS,\n      data: result.data\n    })\n  } catch (err) {\n    yield put({\n      type: 'ADD_POST_FAILURE',\n      data: err.response.data\n    })\n  }\n}\n\nfunction* watchAddPosts() {\n  yield takeLatest('ADD_POST_REQUEST', addPost)\n}\n\nexport default function* postSaga() {\n  yield all([\n    fork(watchAddPosts)\n  ])\n}"]},"metadata":{},"sourceType":"module"}