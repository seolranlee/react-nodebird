{"ast":null,"code":"import { all, fork, call, put, take } from 'redux-saga/effects';\nimport axios from 'axios'; // 서버에 요청하는 함수는 일반 함수!!!\n\nfunction loginAPI() {\n  return axios.post('/api/login');\n}\n\nfunction* logIn() {\n  try {\n    // call: 동기 함수 호출: 결과값을 기다리고 다음 줄로 넘어간다. await이랑 비슷하다고 생각\n    // fork: 비동기 함수 호출(non-blocking): 결과값을 기다리지 않고 다음 줄로 넘어간다.\n    const result = yield call(loginAPI); // call을 써야 한다!!\n    // effect앞에는 항상 yield를 붙인다.\n    // put은 dispatch.\n\n    yield put( // action 객체\n    {\n      type: 'LOG_IN_SUCCESS',\n      data: result.data\n    }); // const result = yield fork(loginAPI)\n  } catch (err) {\n    yield put({\n      type: 'LOG_IN_FAILURE',\n      data: err.response.data\n    });\n  }\n}\n\nfunction logoutAPI() {\n  return axios.post('/api/logout');\n}\n\nfunction* logOut() {\n  try {\n    const result = yield call(logoutAPI);\n    yield put({\n      type: 'LOG_OUT_SUCCESS',\n      data: result.data\n    });\n  } catch (err) {\n    yield put({\n      type: 'LOG_OUT_FAILURE',\n      data: err.response.data\n    });\n  }\n}\n\nfunction addPostAPI() {\n  return axios.create('/api/post');\n}\n\nfunction* addPost() {\n  try {\n    const result = yield call(logoutAPI);\n    yield put({\n      type: 'LOG_OUT_SUCCESS',\n      data: result.data\n    });\n  } catch (err) {\n    yield put({\n      type: 'LOG_OUT_FAILURE',\n      data: err.response.data\n    });\n  }\n}\n\nfunction* watchLogin() {\n  // 'LOGIN'이라는 액션이 들어오면 logIn generator 함수를 실행한다.\n  // eventListner와 유사한 느낌\n  yield take('LOG_IN_REQUEST', logIn);\n}\n\nfunction* watchLogOut() {\n  yield take('LOG_OUT_REQUEST', logOut);\n}\n\nfunction* watchAddPosts() {\n  yield take('ADD_POST_REQUEST', addPost);\n}\n\nexport default function* rootSaga() {\n  // all을 1) 애들을 동시에 실행할 수 있게 해준다.\n  yield all([// 1) fork나 call로 generator함수를 실행시켜준다\n  fork(watchLogin), // fork !== call \n  fork(watchLogOut), fork(watchAddPosts)]);\n}","map":{"version":3,"sources":["/Users/seolranlee/study/react-nodebird/front/sagas/index.js"],"names":["all","fork","call","put","take","axios","loginAPI","post","logIn","result","type","data","err","response","logoutAPI","logOut","addPostAPI","create","addPost","watchLogin","watchLogOut","watchAddPosts","rootSaga"],"mappings":"AAAA,SAASA,GAAT,EAAcC,IAAd,EAAoBC,IAApB,EAA0BC,GAA1B,EAA+BC,IAA/B,QAA2C,oBAA3C;AACA,OAAOC,KAAP,MAAkB,OAAlB,C,CAEA;;AACA,SAASC,QAAT,GAAoB;AAClB,SAAOD,KAAK,CAACE,IAAN,CAAW,YAAX,CAAP;AACD;;AAED,UAAUC,KAAV,GAAkB;AAChB,MAAI;AACF;AACA;AACA,UAAMC,MAAM,GAAG,MAAMP,IAAI,CAACI,QAAD,CAAzB,CAHE,CAGkC;AACpC;AACA;;AACA,UAAMH,GAAG,EACP;AACA;AACEO,MAAAA,IAAI,EAAE,gBADR;AAEEC,MAAAA,IAAI,EAAEF,MAAM,CAACE;AAFf,KAFO,CAAT,CANE,CAaF;AACD,GAdD,CAcE,OAAOC,GAAP,EAAY;AACZ,UAAMT,GAAG,CAAC;AACRO,MAAAA,IAAI,EAAE,gBADE;AAERC,MAAAA,IAAI,EAAEC,GAAG,CAACC,QAAJ,CAAaF;AAFX,KAAD,CAAT;AAID;AACF;;AAED,SAASG,SAAT,GAAqB;AACnB,SAAOT,KAAK,CAACE,IAAN,CAAW,aAAX,CAAP;AACD;;AAED,UAAUQ,MAAV,GAAmB;AACjB,MAAI;AACF,UAAMN,MAAM,GAAG,MAAMP,IAAI,CAACY,SAAD,CAAzB;AACA,UAAMX,GAAG,CAAC;AACRO,MAAAA,IAAI,EAAE,iBADE;AAERC,MAAAA,IAAI,EAAEF,MAAM,CAACE;AAFL,KAAD,CAAT;AAID,GAND,CAME,OAAOC,GAAP,EAAY;AACZ,UAAMT,GAAG,CAAC;AACRO,MAAAA,IAAI,EAAE,iBADE;AAERC,MAAAA,IAAI,EAAEC,GAAG,CAACC,QAAJ,CAAaF;AAFX,KAAD,CAAT;AAID;AACF;;AAED,SAASK,UAAT,GAAsB;AACpB,SAAOX,KAAK,CAACY,MAAN,CAAa,WAAb,CAAP;AACD;;AAED,UAAUC,OAAV,GAAoB;AAClB,MAAI;AACF,UAAMT,MAAM,GAAG,MAAMP,IAAI,CAACY,SAAD,CAAzB;AACA,UAAMX,GAAG,CAAC;AACRO,MAAAA,IAAI,EAAE,iBADE;AAERC,MAAAA,IAAI,EAAEF,MAAM,CAACE;AAFL,KAAD,CAAT;AAID,GAND,CAME,OAAOC,GAAP,EAAY;AACZ,UAAMT,GAAG,CAAC;AACRO,MAAAA,IAAI,EAAE,iBADE;AAERC,MAAAA,IAAI,EAAEC,GAAG,CAACC,QAAJ,CAAaF;AAFX,KAAD,CAAT;AAID;AACF;;AAED,UAAUQ,UAAV,GAAuB;AACrB;AACA;AACA,QAAMf,IAAI,CAAC,gBAAD,EAAmBI,KAAnB,CAAV;AACD;;AAED,UAAUY,WAAV,GAAwB;AACtB,QAAMhB,IAAI,CAAC,iBAAD,EAAoBW,MAApB,CAAV;AACD;;AAED,UAAUM,aAAV,GAA0B;AACxB,QAAMjB,IAAI,CAAC,kBAAD,EAAqBc,OAArB,CAAV;AACD;;AAED,eAAe,UAAUI,QAAV,GAAqB;AAClC;AACA,QAAMtB,GAAG,CAAC,CACR;AACAC,EAAAA,IAAI,CAACkB,UAAD,CAFI,EAEU;AAClBlB,EAAAA,IAAI,CAACmB,WAAD,CAHI,EAIRnB,IAAI,CAACoB,aAAD,CAJI,CAAD,CAAT;AAMD","sourcesContent":["import { all, fork, call, put, take } from 'redux-saga/effects'\nimport axios from 'axios'\n\n// 서버에 요청하는 함수는 일반 함수!!!\nfunction loginAPI() {\n  return axios.post('/api/login')\n}\n\nfunction* logIn() {\n  try {\n    // call: 동기 함수 호출: 결과값을 기다리고 다음 줄로 넘어간다. await이랑 비슷하다고 생각\n    // fork: 비동기 함수 호출(non-blocking): 결과값을 기다리지 않고 다음 줄로 넘어간다.\n    const result = yield call(loginAPI) // call을 써야 한다!!\n    // effect앞에는 항상 yield를 붙인다.\n    // put은 dispatch.\n    yield put(\n      // action 객체\n      {\n        type: 'LOG_IN_SUCCESS',\n        data: result.data\n      }\n    )\n    // const result = yield fork(loginAPI)\n  } catch (err) {\n    yield put({\n      type: 'LOG_IN_FAILURE',\n      data: err.response.data\n    })\n  }\n}\n\nfunction logoutAPI() {\n  return axios.post('/api/logout')\n}\n\nfunction* logOut() {\n  try {\n    const result = yield call(logoutAPI)\n    yield put({\n      type: 'LOG_OUT_SUCCESS',\n      data: result.data\n    })\n  } catch (err) {\n    yield put({\n      type: 'LOG_OUT_FAILURE',\n      data: err.response.data\n    })\n  }\n}\n\nfunction addPostAPI() {\n  return axios.create('/api/post')\n}\n\nfunction* addPost() {\n  try {\n    const result = yield call(logoutAPI)\n    yield put({\n      type: 'LOG_OUT_SUCCESS',\n      data: result.data\n    })\n  } catch (err) {\n    yield put({\n      type: 'LOG_OUT_FAILURE',\n      data: err.response.data\n    })\n  }\n}\n\nfunction* watchLogin() {\n  // 'LOGIN'이라는 액션이 들어오면 logIn generator 함수를 실행한다.\n  // eventListner와 유사한 느낌\n  yield take('LOG_IN_REQUEST', logIn)\n}\n\nfunction* watchLogOut() {\n  yield take('LOG_OUT_REQUEST', logOut)\n}\n\nfunction* watchAddPosts() {\n  yield take('ADD_POST_REQUEST', addPost)\n}\n\nexport default function* rootSaga() {\n  // all을 1) 애들을 동시에 실행할 수 있게 해준다.\n  yield all([\n    // 1) fork나 call로 generator함수를 실행시켜준다\n    fork(watchLogin), // fork !== call \n    fork(watchLogOut),\n    fork(watchAddPosts),\n  ])\n}"]},"metadata":{},"sourceType":"module"}