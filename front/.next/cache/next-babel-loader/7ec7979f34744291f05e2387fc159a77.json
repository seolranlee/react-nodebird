{"ast":null,"code":"import { all, fork, call, put, take } from 'redux-saga/effects';\nimport axios from 'axios'; // 서버에 요청하는 함수는 일반 함수!!!\n// login\n\nfunction loginAPI(data) {\n  return axios.post('/api/login', data);\n}\n\nfunction* logIn(action) {\n  try {\n    // call: 동기 함수 호출: 결과값을 기다리고 다음 줄로 넘어간다. await이랑 비슷하다고 생각\n    // fork: 비동기 함수 호출(non-blocking): 결과값을 기다리지 않고 다음 줄로 넘어간다.\n    const result = yield call(loginAPI, action.data); // call을 써야 한다!!\n    // effect앞에는 항상 yield를 붙인다.\n    // put은 dispatch.\n\n    yield put( // action 객체\n    {\n      type: 'LOG_IN_SUCCESS',\n      data: result.data\n    }); // const result = yield fork(loginAPI)\n  } catch (err) {\n    yield put({\n      type: 'LOG_IN_FAILURE',\n      data: err.response.data\n    });\n  }\n} // logout\n\n\nfunction logoutAPI() {\n  return axios.post('/api/logout');\n}\n\nfunction* logOut() {\n  try {\n    const result = yield call(logoutAPI);\n    yield put({\n      type: 'LOG_OUT_SUCCESS',\n      data: result.data\n    });\n  } catch (err) {\n    yield put({\n      type: 'LOG_OUT_FAILURE',\n      data: err.response.data\n    });\n  }\n} // addPost\n\n\nfunction addPostAPI(data) {\n  return axios.post('/api/post', data);\n}\n\nfunction* addPost(action) {\n  try {\n    const result = yield call(addPostAPI, action.data);\n    yield put({\n      type: 'ADD_POST_SUCCESS',\n      data: result.data\n    });\n  } catch (err) {\n    yield put({\n      type: 'ADD_POST_FAILURE',\n      data: err.response.data\n    });\n  }\n}\n\nfunction* watchLogin() {\n  // 'LOGIN'이라는 액션이 들어오면 logIn generator 함수를 실행한다.\n  // eventListner와 유사한 느낌\n  yield take('LOG_IN_REQUEST', logIn);\n}\n\nfunction* watchLogOut() {\n  yield take('LOG_OUT_REQUEST', logOut);\n}\n\nfunction* watchAddPosts() {\n  yield take('ADD_POST_REQUEST', addPost);\n}\n\nexport default function* rootSaga() {\n  // all을 1) 애들을 동시에 실행할 수 있게 해준다.\n  yield all([// 1) fork나 call로 generator함수를 실행시켜준다\n  fork(watchLogin), // fork !== call \n  fork(watchLogOut), fork(watchAddPosts)]);\n}","map":{"version":3,"sources":["/Users/seolranlee/study/react-nodebird/front/sagas/index.js"],"names":["all","fork","call","put","take","axios","loginAPI","data","post","logIn","action","result","type","err","response","logoutAPI","logOut","addPostAPI","addPost","watchLogin","watchLogOut","watchAddPosts","rootSaga"],"mappings":"AAAA,SAASA,GAAT,EAAcC,IAAd,EAAoBC,IAApB,EAA0BC,GAA1B,EAA+BC,IAA/B,QAA2C,oBAA3C;AACA,OAAOC,KAAP,MAAkB,OAAlB,C,CAEA;AACA;;AACA,SAASC,QAAT,CAAkBC,IAAlB,EAAwB;AACtB,SAAOF,KAAK,CAACG,IAAN,CAAW,YAAX,EAAyBD,IAAzB,CAAP;AACD;;AAED,UAAUE,KAAV,CAAgBC,MAAhB,EAAwB;AACtB,MAAI;AACF;AACA;AACA,UAAMC,MAAM,GAAG,MAAMT,IAAI,CAACI,QAAD,EAAWI,MAAM,CAACH,IAAlB,CAAzB,CAHE,CAG+C;AACjD;AACA;;AACA,UAAMJ,GAAG,EACP;AACA;AACES,MAAAA,IAAI,EAAE,gBADR;AAEEL,MAAAA,IAAI,EAAEI,MAAM,CAACJ;AAFf,KAFO,CAAT,CANE,CAaF;AACD,GAdD,CAcE,OAAOM,GAAP,EAAY;AACZ,UAAMV,GAAG,CAAC;AACRS,MAAAA,IAAI,EAAE,gBADE;AAERL,MAAAA,IAAI,EAAEM,GAAG,CAACC,QAAJ,CAAaP;AAFX,KAAD,CAAT;AAID;AACF,C,CAED;;;AACA,SAASQ,SAAT,GAAqB;AACnB,SAAOV,KAAK,CAACG,IAAN,CAAW,aAAX,CAAP;AACD;;AAED,UAAUQ,MAAV,GAAmB;AACjB,MAAI;AACF,UAAML,MAAM,GAAG,MAAMT,IAAI,CAACa,SAAD,CAAzB;AACA,UAAMZ,GAAG,CAAC;AACRS,MAAAA,IAAI,EAAE,iBADE;AAERL,MAAAA,IAAI,EAAEI,MAAM,CAACJ;AAFL,KAAD,CAAT;AAID,GAND,CAME,OAAOM,GAAP,EAAY;AACZ,UAAMV,GAAG,CAAC;AACRS,MAAAA,IAAI,EAAE,iBADE;AAERL,MAAAA,IAAI,EAAEM,GAAG,CAACC,QAAJ,CAAaP;AAFX,KAAD,CAAT;AAID;AACF,C,CAED;;;AACA,SAASU,UAAT,CAAoBV,IAApB,EAA0B;AACxB,SAAOF,KAAK,CAACG,IAAN,CAAW,WAAX,EAAwBD,IAAxB,CAAP;AACD;;AAED,UAAUW,OAAV,CAAkBR,MAAlB,EAA0B;AACxB,MAAI;AACF,UAAMC,MAAM,GAAG,MAAMT,IAAI,CAACe,UAAD,EAAaP,MAAM,CAACH,IAApB,CAAzB;AACA,UAAMJ,GAAG,CAAC;AACRS,MAAAA,IAAI,EAAE,kBADE;AAERL,MAAAA,IAAI,EAAEI,MAAM,CAACJ;AAFL,KAAD,CAAT;AAID,GAND,CAME,OAAOM,GAAP,EAAY;AACZ,UAAMV,GAAG,CAAC;AACRS,MAAAA,IAAI,EAAE,kBADE;AAERL,MAAAA,IAAI,EAAEM,GAAG,CAACC,QAAJ,CAAaP;AAFX,KAAD,CAAT;AAID;AACF;;AAED,UAAUY,UAAV,GAAuB;AACrB;AACA;AACA,QAAMf,IAAI,CAAC,gBAAD,EAAmBK,KAAnB,CAAV;AACD;;AAED,UAAUW,WAAV,GAAwB;AACtB,QAAMhB,IAAI,CAAC,iBAAD,EAAoBY,MAApB,CAAV;AACD;;AAED,UAAUK,aAAV,GAA0B;AACxB,QAAMjB,IAAI,CAAC,kBAAD,EAAqBc,OAArB,CAAV;AACD;;AAED,eAAe,UAAUI,QAAV,GAAqB;AAClC;AACA,QAAMtB,GAAG,CAAC,CACR;AACAC,EAAAA,IAAI,CAACkB,UAAD,CAFI,EAEU;AAClBlB,EAAAA,IAAI,CAACmB,WAAD,CAHI,EAIRnB,IAAI,CAACoB,aAAD,CAJI,CAAD,CAAT;AAMD","sourcesContent":["import { all, fork, call, put, take } from 'redux-saga/effects'\nimport axios from 'axios'\n\n// 서버에 요청하는 함수는 일반 함수!!!\n// login\nfunction loginAPI(data) {\n  return axios.post('/api/login', data)\n}\n\nfunction* logIn(action) {\n  try {\n    // call: 동기 함수 호출: 결과값을 기다리고 다음 줄로 넘어간다. await이랑 비슷하다고 생각\n    // fork: 비동기 함수 호출(non-blocking): 결과값을 기다리지 않고 다음 줄로 넘어간다.\n    const result = yield call(loginAPI, action.data) // call을 써야 한다!!\n    // effect앞에는 항상 yield를 붙인다.\n    // put은 dispatch.\n    yield put(\n      // action 객체\n      {\n        type: 'LOG_IN_SUCCESS',\n        data: result.data\n      }\n    )\n    // const result = yield fork(loginAPI)\n  } catch (err) {\n    yield put({\n      type: 'LOG_IN_FAILURE',\n      data: err.response.data\n    })\n  }\n}\n\n// logout\nfunction logoutAPI() {\n  return axios.post('/api/logout')\n}\n\nfunction* logOut() {\n  try {\n    const result = yield call(logoutAPI)\n    yield put({\n      type: 'LOG_OUT_SUCCESS',\n      data: result.data\n    })\n  } catch (err) {\n    yield put({\n      type: 'LOG_OUT_FAILURE',\n      data: err.response.data\n    })\n  }\n}\n\n// addPost\nfunction addPostAPI(data) {\n  return axios.post('/api/post', data)\n}\n\nfunction* addPost(action) {\n  try {\n    const result = yield call(addPostAPI, action.data)\n    yield put({\n      type: 'ADD_POST_SUCCESS',\n      data: result.data\n    })\n  } catch (err) {\n    yield put({\n      type: 'ADD_POST_FAILURE',\n      data: err.response.data\n    })\n  }\n}\n\nfunction* watchLogin() {\n  // 'LOGIN'이라는 액션이 들어오면 logIn generator 함수를 실행한다.\n  // eventListner와 유사한 느낌\n  yield take('LOG_IN_REQUEST', logIn)\n}\n\nfunction* watchLogOut() {\n  yield take('LOG_OUT_REQUEST', logOut)\n}\n\nfunction* watchAddPosts() {\n  yield take('ADD_POST_REQUEST', addPost)\n}\n\nexport default function* rootSaga() {\n  // all을 1) 애들을 동시에 실행할 수 있게 해준다.\n  yield all([\n    // 1) fork나 call로 generator함수를 실행시켜준다\n    fork(watchLogin), // fork !== call \n    fork(watchLogOut),\n    fork(watchAddPosts),\n  ])\n}"]},"metadata":{},"sourceType":"module"}