{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/esm/toConsumableArray\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\n// reducer중심으로 생각.\n// 화면이 아니라 데이터를 먼저 구성.\nexport var initialState = {\n  mainPosts: [{\n    id: 1,\n    User: {\n      id: 1,\n      nickname: 'seolranlee'\n    },\n    content: '첫 번째 게시글 #해시태그 #익스프레스',\n    Images: [{\n      src: 'https://ccdn.lezhin.com/v2/banners/explore_boys/images/17467.webp?updated=1634792020109'\n    }, {\n      src: 'https://ccdn.lezhin.com/v2/banners/explore_boys/images/17630.webp?updated=1635250994567'\n    }, {\n      src: 'https://ccdn.lezhin.com/v2/banners/explore_boys/images/17303.webp?updated=1634553971673s'\n    }],\n    Comments: [{\n      User: {\n        nickname: 'user1'\n      },\n      content: '코멘트1'\n    }, {\n      User: {\n        nickname: 'user2'\n      },\n      content: '코멘트2'\n    }]\n  }],\n  imagePaths: [],\n  addPostLoading: false,\n  addPostDone: false,\n  addPostError: false\n}; // 액션 이름을 상수로 빼둔다=>오타확률을 낮춘다\n\nexport var ADD_POST_REQUEST = 'ADD_POST_REQUEST';\nexport var ADD_POST_SUCCESS = 'ADD_POST_SUCCESS';\nexport var ADD_POST_FAILURE = 'ADD_POST_FAILURE';\nexport var addPost = function addPost(data) {\n  return {\n    type: ADD_POST_REQUEST,\n    data: data\n  };\n};\nvar dummyPost = {\n  id: 2,\n  content: 'dummy data',\n  User: {\n    id: 1,\n    nickname: 'foo'\n  },\n  Images: [],\n  Comments: []\n};\n\nvar reducer = function reducer() {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case ADD_POST_REQUEST:\n    case ADD_POST_SUCCESS:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        // dummyPost를 앞에다가 추가해줘야 새로운 게시글이 위에 올라간다.\n        mainPosts: [dummyPost].concat(_toConsumableArray(state.mainPosts)),\n        addPostLoading: true\n      });\n\n    case ADD_POST_FAILURE:\n    default:\n      return state;\n  }\n};\n\nexport default reducer;","map":{"version":3,"sources":["/Users/seolranlee/study/react-nodebird/front/reducers/post.js"],"names":["initialState","mainPosts","id","User","nickname","content","Images","src","Comments","imagePaths","addPostLoading","addPostDone","addPostError","ADD_POST_REQUEST","ADD_POST_SUCCESS","ADD_POST_FAILURE","addPost","data","type","dummyPost","reducer","state","action"],"mappings":";;;;;;;AAAA;AACA;AAEA,OAAO,IAAMA,YAAY,GAAG;AAC1BC,EAAAA,SAAS,EAAE,CAAC;AACVC,IAAAA,EAAE,EAAE,CADM;AAEVC,IAAAA,IAAI,EAAE;AACJD,MAAAA,EAAE,EAAE,CADA;AAEJE,MAAAA,QAAQ,EAAE;AAFN,KAFI;AAMVC,IAAAA,OAAO,EAAE,uBANC;AAOVC,IAAAA,MAAM,EAAE,CACN;AACEC,MAAAA,GAAG,EAAE;AADP,KADM,EAIN;AACEA,MAAAA,GAAG,EAAE;AADP,KAJM,EAON;AACEA,MAAAA,GAAG,EAAE;AADP,KAPM,CAPE;AAkBVC,IAAAA,QAAQ,EAAE,CACR;AACEL,MAAAA,IAAI,EAAE;AACJC,QAAAA,QAAQ,EAAE;AADN,OADR;AAIEC,MAAAA,OAAO,EAAE;AAJX,KADQ,EAOR;AACEF,MAAAA,IAAI,EAAE;AACJC,QAAAA,QAAQ,EAAE;AADN,OADR;AAIEC,MAAAA,OAAO,EAAE;AAJX,KAPQ;AAlBA,GAAD,CADe;AAkC1BI,EAAAA,UAAU,EAAE,EAlCc;AAmC1BC,EAAAA,cAAc,EAAE,KAnCU;AAoC1BC,EAAAA,WAAW,EAAE,KApCa;AAqC1BC,EAAAA,YAAY,EAAE;AArCY,CAArB,C,CAwCP;;AACA,OAAO,IAAMC,gBAAgB,GAAG,kBAAzB;AACP,OAAO,IAAMC,gBAAgB,GAAG,kBAAzB;AACP,OAAO,IAAMC,gBAAgB,GAAG,kBAAzB;AAEP,OAAO,IAAMC,OAAO,GAAG,SAAVA,OAAU,CAACC,IAAD;AAAA,SAAW;AAChCC,IAAAA,IAAI,EAAEL,gBAD0B;AAEhCI,IAAAA,IAAI,EAAJA;AAFgC,GAAX;AAAA,CAAhB;AAMP,IAAME,SAAS,GAAG;AAChBjB,EAAAA,EAAE,EAAE,CADY;AAEhBG,EAAAA,OAAO,EAAE,YAFO;AAGhBF,EAAAA,IAAI,EAAE;AACJD,IAAAA,EAAE,EAAE,CADA;AAEJE,IAAAA,QAAQ,EAAE;AAFN,GAHU;AAOhBE,EAAAA,MAAM,EAAE,EAPQ;AAQhBE,EAAAA,QAAQ,EAAE;AARM,CAAlB;;AAWA,IAAMY,OAAO,GAAG,SAAVA,OAAU,GAAkC;AAAA,MAAjCC,KAAiC,uEAAzBrB,YAAyB;AAAA,MAAXsB,MAAW;;AAChD,UAAQA,MAAM,CAACJ,IAAf;AACE,SAAKL,gBAAL;AAEA,SAAKC,gBAAL;AACE,6CACKO,KADL;AAEE;AACApB,QAAAA,SAAS,GAAGkB,SAAH,4BAAiBE,KAAK,CAACpB,SAAvB,EAHX;AAIES,QAAAA,cAAc,EAAE;AAJlB;;AAMF,SAAKK,gBAAL;AAEA;AACE,aAAOM,KAAP;AAbJ;AAeD,CAhBD;;AAkBA,eAAeD,OAAf","sourcesContent":["// reducer중심으로 생각.\n// 화면이 아니라 데이터를 먼저 구성.\n\nexport const initialState = {\n  mainPosts: [{\n    id: 1,\n    User: {\n      id: 1,\n      nickname: 'seolranlee'\n    },\n    content: '첫 번째 게시글 #해시태그 #익스프레스',\n    Images: [\n      {\n        src: 'https://ccdn.lezhin.com/v2/banners/explore_boys/images/17467.webp?updated=1634792020109'\n      },\n      {\n        src: 'https://ccdn.lezhin.com/v2/banners/explore_boys/images/17630.webp?updated=1635250994567'\n      },\n      {\n        src: 'https://ccdn.lezhin.com/v2/banners/explore_boys/images/17303.webp?updated=1634553971673s'\n      }\n    ],\n    Comments: [\n      {\n        User: {\n          nickname: 'user1'\n        },\n        content: '코멘트1'\n      },\n      {\n        User: {\n          nickname: 'user2'\n        },\n        content: '코멘트2'\n      }\n    ]\n  }],\n  imagePaths: [],\n  addPostLoading: false,\n  addPostDone: false,\n  addPostError: false\n}\n\n// 액션 이름을 상수로 빼둔다=>오타확률을 낮춘다\nexport const ADD_POST_REQUEST = 'ADD_POST_REQUEST'\nexport const ADD_POST_SUCCESS = 'ADD_POST_SUCCESS'\nexport const ADD_POST_FAILURE = 'ADD_POST_FAILURE'\n\nexport const addPost = (data) => ({\n  type: ADD_POST_REQUEST,\n  data\n})\n\n\nconst dummyPost = {\n  id: 2,\n  content: 'dummy data',\n  User: {\n    id: 1,\n    nickname: 'foo'\n  },\n  Images: [],\n  Comments: []\n}\n\nconst reducer = (state = initialState, action) => {\n  switch (action.type) {\n    case ADD_POST_REQUEST:\n      \n    case ADD_POST_SUCCESS:\n      return {\n        ...state,\n        // dummyPost를 앞에다가 추가해줘야 새로운 게시글이 위에 올라간다.\n        mainPosts: [dummyPost, ...state.mainPosts],\n        addPostLoading: true\n      }\n    case ADD_POST_FAILURE:\n\n    default:\n      return state\n  }\n}\n\nexport default reducer"]},"metadata":{},"sourceType":"module"}