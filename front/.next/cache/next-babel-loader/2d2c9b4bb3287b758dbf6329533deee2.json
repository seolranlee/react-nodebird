{"ast":null,"code":"var _jsxFileName = \"/Users/seolranlee/study/react-nodebird/front/components/CommentForm.js\";\nimport React, { useCallback, useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport { Form, Input, Button } from 'antd';\nimport useInput from '../hooks/useInput';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { ADD_COMMENT_REQUEST } from '../reducers/post';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst CommentForm = ({\n  post\n}) => {\n  const id = useSelector(state => {\n    var _state$user$me;\n\n    return (_state$user$me = state.user.me) === null || _state$user$me === void 0 ? void 0 : _state$user$me.id;\n  });\n  const {\n    addCommentDone,\n    addCommentLoading\n  } = useSelector(state => state.post);\n  const [commentText, onChangeCommentText, setCommentText] = useInput('');\n  useEffect(() => {\n    if (addCommentDone) setCommentText('');\n  }, [addCommentDone]);\n  const dispatch = useDispatch();\n  const onSubmitComment = useCallback(() => {\n    // post를 props로 받아온 이유: 게시글 id아래에 댓글을 달거기 때문에\n    dispatch({\n      type: ADD_COMMENT_REQUEST,\n      data: {\n        content: commentText,\n        postId: post.id,\n        userId: id\n      }\n    });\n  }, [commentText, id]);\n  return /*#__PURE__*/_jsxDEV(Form, {\n    onFinish: onSubmitComment,\n    children: /*#__PURE__*/_jsxDEV(Form.Item, {\n      style: {\n        position: 'relative',\n        margin: 0\n      },\n      children: [/*#__PURE__*/_jsxDEV(Input.TextArea, {\n        value: commentText,\n        onChange: onChangeCommentText,\n        rows: 4\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 29,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        style: {\n          position: 'absolute',\n          right: 8,\n          bottom: -48,\n          zIndex: 1\n        },\n        type: \"primary\",\n        htmlType: \"submit\",\n        loading: addCommentLoading,\n        children: \"write\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 30,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 27,\n    columnNumber: 5\n  }, this);\n};\n\nCommentForm.propTypes = {\n  post: PropTypes.object.isRequired\n};\nexport default CommentForm;","map":{"version":3,"sources":["/Users/seolranlee/study/react-nodebird/front/components/CommentForm.js"],"names":["React","useCallback","useEffect","PropTypes","Form","Input","Button","useInput","useDispatch","useSelector","ADD_COMMENT_REQUEST","CommentForm","post","id","state","user","me","addCommentDone","addCommentLoading","commentText","onChangeCommentText","setCommentText","dispatch","onSubmitComment","type","data","content","postId","userId","position","margin","right","bottom","zIndex","propTypes","object","isRequired"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,WAAhB,EAA6BC,SAA7B,QAA8C,OAA9C;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,SAASC,IAAT,EAAeC,KAAf,EAAsBC,MAAtB,QAAoC,MAApC;AACA,OAAOC,QAAP,MAAqB,mBAArB;AACA,SAASC,WAAT,EAAsBC,WAAtB,QAAyC,aAAzC;AACA,SAASC,mBAAT,QAAoC,kBAApC;;;AAEA,MAAMC,WAAW,GAAG,CAAC;AAAEC,EAAAA;AAAF,CAAD,KAAc;AAChC,QAAMC,EAAE,GAAGJ,WAAW,CAAEK,KAAD;AAAA;;AAAA,6BAAWA,KAAK,CAACC,IAAN,CAAWC,EAAtB,mDAAW,eAAeH,EAA1B;AAAA,GAAD,CAAtB;AACA,QAAM;AAAEI,IAAAA,cAAF;AAAkBC,IAAAA;AAAlB,MAAwCT,WAAW,CAAEK,KAAD,IAAWA,KAAK,CAACF,IAAlB,CAAzD;AACA,QAAM,CAACO,WAAD,EAAcC,mBAAd,EAAmCC,cAAnC,IAAqDd,QAAQ,CAAC,EAAD,CAAnE;AAEAL,EAAAA,SAAS,CAAC,MAAM;AACd,QAAIe,cAAJ,EAAoBI,cAAc,CAAC,EAAD,CAAd;AACrB,GAFQ,EAEN,CAACJ,cAAD,CAFM,CAAT;AAIA,QAAMK,QAAQ,GAAGd,WAAW,EAA5B;AACA,QAAMe,eAAe,GAAGtB,WAAW,CAAC,MAAM;AACxC;AACAqB,IAAAA,QAAQ,CAAC;AACPE,MAAAA,IAAI,EAAEd,mBADC;AAEPe,MAAAA,IAAI,EAAE;AAAEC,QAAAA,OAAO,EAAEP,WAAX;AAAwBQ,QAAAA,MAAM,EAAEf,IAAI,CAACC,EAArC;AAAyCe,QAAAA,MAAM,EAAEf;AAAjD;AAFC,KAAD,CAAR;AAID,GANkC,EAMhC,CAACM,WAAD,EAAcN,EAAd,CANgC,CAAnC;AAQA,sBACE,QAAC,IAAD;AAAM,IAAA,QAAQ,EAAEU,eAAhB;AAAA,2BACE,QAAC,IAAD,CAAM,IAAN;AAAW,MAAA,KAAK,EAAE;AAAEM,QAAAA,QAAQ,EAAE,UAAZ;AAAwBC,QAAAA,MAAM,EAAE;AAAhC,OAAlB;AAAA,8BACE,QAAC,KAAD,CAAO,QAAP;AAAgB,QAAA,KAAK,EAAEX,WAAvB;AAAoC,QAAA,QAAQ,EAAEC,mBAA9C;AAAmE,QAAA,IAAI,EAAE;AAAzE;AAAA;AAAA;AAAA;AAAA,cADF,eAEE,QAAC,MAAD;AACE,QAAA,KAAK,EAAE;AAAES,UAAAA,QAAQ,EAAE,UAAZ;AAAwBE,UAAAA,KAAK,EAAE,CAA/B;AAAkCC,UAAAA,MAAM,EAAE,CAAC,EAA3C;AAA+CC,UAAAA,MAAM,EAAE;AAAvD,SADT;AAEE,QAAA,IAAI,EAAC,SAFP;AAEiB,QAAA,QAAQ,EAAC,QAF1B;AAEmC,QAAA,OAAO,EAAEf,iBAF5C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAFF;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,UADF;AAUD,CA5BD;;AA8BAP,WAAW,CAACuB,SAAZ,GAAwB;AACtBtB,EAAAA,IAAI,EAAET,SAAS,CAACgC,MAAV,CAAiBC;AADD,CAAxB;AAIA,eAAezB,WAAf","sourcesContent":["import React, { useCallback, useEffect } from 'react'\nimport PropTypes from 'prop-types'\nimport { Form, Input, Button } from 'antd'\nimport useInput from '../hooks/useInput'\nimport { useDispatch, useSelector } from 'react-redux'\nimport { ADD_COMMENT_REQUEST } from '../reducers/post'\n\nconst CommentForm = ({ post }) => {  \n  const id = useSelector((state) => state.user.me?.id)\n  const { addCommentDone, addCommentLoading } = useSelector((state) => state.post)\n  const [commentText, onChangeCommentText, setCommentText] = useInput('')\n  \n  useEffect(() => {\n    if (addCommentDone) setCommentText('')\n  }, [addCommentDone])\n\n  const dispatch = useDispatch()\n  const onSubmitComment = useCallback(() => {\n    // post를 props로 받아온 이유: 게시글 id아래에 댓글을 달거기 때문에\n    dispatch({\n      type: ADD_COMMENT_REQUEST,\n      data: { content: commentText, postId: post.id, userId: id }\n    })\n  }, [commentText, id])\n\n  return (\n    <Form onFinish={onSubmitComment}>\n      <Form.Item style={{ position: 'relative', margin: 0 }}>\n        <Input.TextArea value={commentText} onChange={onChangeCommentText} rows={4} />\n        <Button \n          style={{ position: 'absolute', right: 8, bottom: -48, zIndex: 1 }} \n          type=\"primary\" htmlType=\"submit\" loading={addCommentLoading}>write</Button>\n      </Form.Item>\n    </Form>\n  )\n}\n\nCommentForm.propTypes = {\n  post: PropTypes.object.isRequired\n}\n\nexport default CommentForm"]},"metadata":{},"sourceType":"module"}