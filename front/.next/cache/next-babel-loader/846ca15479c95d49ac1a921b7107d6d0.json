{"ast":null,"code":"var _jsxFileName = \"/Users/seolranlee/study/react-nodebird/front/components/PostCard.js\";\nimport React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { Card, Popover, Button, Avatar } from 'antd';\nimport { EllipsisOutlined, HeartOutlined, MessageOutlined, RetweetOutlined } from '@ant-design/icons';\nimport { useSelector } from 'react-redux';\nimport PostImages from './PostImages';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst PostCard = ({\n  post\n}) => {\n  var _post$Images;\n\n  const {\n    0: linked,\n    1: setLinked\n  } = useState(false); // const { me } = useSelector((state) => state.user)\n  // const id = me && me.id와 같은 문법. 옵셔널 체이닝 연산자. me가 있으면 me.id가 할당되고 없으면 undefined 할당\n  // const id = me?.id\n  // const id = useSelector((state) => state.user.me && state.user.me.id)\n\n  const id = useSelector(state => {\n    var _state$user$me;\n\n    return (_state$user$me = state.user.me) === null || _state$user$me === void 0 ? void 0 : _state$user$me.id;\n  });\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      marginBottom: 20\n    },\n    children: /*#__PURE__*/_jsxDEV(Card, {\n      cover: ((_post$Images = post.Images) === null || _post$Images === void 0 ? void 0 : _post$Images[0]) && /*#__PURE__*/_jsxDEV(PostImages, {\n        images: post.Images\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 20,\n        columnNumber: 36\n      }, this),\n      actions: [/*#__PURE__*/_jsxDEV(RetweetOutlined, {}, \"retweet\", false, {\n        fileName: _jsxFileName,\n        lineNumber: 22,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(HeartOutlined, {}, \"heart\", false, {\n        fileName: _jsxFileName,\n        lineNumber: 23,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(MessageOutlined, {}, \"commnet\", false, {\n        fileName: _jsxFileName,\n        lineNumber: 24,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(Popover, {\n        content: /*#__PURE__*/_jsxDEV(Button.Group, {\n          children: id && post.User.id === id ? /*#__PURE__*/_jsxDEV(_Fragment, {\n            children: [/*#__PURE__*/_jsxDEV(Button, {\n              children: \"\\uC218\\uC815\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 29,\n              columnNumber: 21\n            }, this), /*#__PURE__*/_jsxDEV(Button, {\n              tyep: \"danger\",\n              children: \"\\uC0AD\\uC81C\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 30,\n              columnNumber: 21\n            }, this)]\n          }, void 0, true) : /*#__PURE__*/_jsxDEV(Button, {\n            children: \"\\uC2E0\\uACE0\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 32,\n            columnNumber: 21\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 26,\n          columnNumber: 13\n        }, this),\n        children: /*#__PURE__*/_jsxDEV(EllipsisOutlined, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 35,\n          columnNumber: 13\n        }, this)\n      }, \"more\", false, {\n        fileName: _jsxFileName,\n        lineNumber: 25,\n        columnNumber: 11\n      }, this)],\n      children: /*#__PURE__*/_jsxDEV(Card.Meta, {\n        avatar: /*#__PURE__*/_jsxDEV(Avatar, {\n          children: post.User.nickname[0]\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 40,\n          columnNumber: 19\n        }, this),\n        title: post.User.nickname,\n        description: post.content\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 39,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 19,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 18,\n    columnNumber: 5\n  }, this);\n};\n\nPostCard.propTypes = {\n  // shape: object 타입을 더 자세히 명시해두고 싶을 때 쓴다.\n  post: PropTypes.shape({\n    id: PropTypes.number,\n    User: PropTypes.shape({\n      id: PropTypes.number,\n      nickname: PropTypes.string\n    }),\n    content: PropTypes.string,\n    createdAt: PropTypes.object,\n    // arrayOf(PropTypes.object): 객체들의 배열이라는 뜻\n    Comments: PropTypes.arrayOf(PropTypes.object),\n    Images: PropTypes.arrayOf(PropTypes.object)\n  }).isRequired\n};\nexport default PostCard;","map":{"version":3,"sources":["/Users/seolranlee/study/react-nodebird/front/components/PostCard.js"],"names":["React","useState","PropTypes","Card","Popover","Button","Avatar","EllipsisOutlined","HeartOutlined","MessageOutlined","RetweetOutlined","useSelector","PostImages","PostCard","post","linked","setLinked","id","state","user","me","marginBottom","Images","User","nickname","content","propTypes","shape","number","string","createdAt","object","Comments","arrayOf","isRequired"],"mappings":"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","sourcesContent":["import React, { useState } from 'react'\nimport PropTypes from 'prop-types'\nimport { Card, Popover, Button, Avatar } from 'antd'\nimport { EllipsisOutlined, HeartOutlined, MessageOutlined, RetweetOutlined } from '@ant-design/icons'\nimport { useSelector } from 'react-redux'\nimport PostImages from './PostImages'\n\nconst PostCard = ({ post }) => {\n  const [linked, setLinked] = useState(false)\n  // const { me } = useSelector((state) => state.user)\n  // const id = me && me.id와 같은 문법. 옵셔널 체이닝 연산자. me가 있으면 me.id가 할당되고 없으면 undefined 할당\n  // const id = me?.id\n\n  // const id = useSelector((state) => state.user.me && state.user.me.id)\n  const id = useSelector((state) => state.user.me?.id)\n\n  return (\n    <div style={{ marginBottom: 20 }}>\n      <Card\n        cover={post.Images?.[0] && <PostImages images={post.Images}/>}\n        actions={[\n          <RetweetOutlined key=\"retweet\" />,\n          <HeartOutlined key=\"heart\" />,\n          <MessageOutlined key=\"commnet\" />,\n          <Popover key=\"more\" content={(\n            <Button.Group>\n              {id && post.User.id === id ? (\n                  <>\n                    <Button>수정</Button>\n                    <Button tyep=\"danger\">삭제</Button>\n                  </>\n                ) : <Button>신고</Button>}\n            </Button.Group>\n          )}>\n            <EllipsisOutlined />\n          </Popover>\n        ]}\n      >\n        <Card.Meta \n          avatar={<Avatar>{post.User.nickname[0]}</Avatar>}\n          title={post.User.nickname}\n          description={post.content}\n        />\n      </Card>\n      {/* <CommentForm />\n      <Comments /> */}\n    </div>\n  )\n}\n\nPostCard.propTypes = {\n  // shape: object 타입을 더 자세히 명시해두고 싶을 때 쓴다.\n  post: PropTypes.shape({\n    id: PropTypes.number,\n    User: PropTypes.shape({\n      id: PropTypes.number,\n      nickname: PropTypes.string\n    }),\n    content: PropTypes.string,\n    createdAt: PropTypes.object,\n    // arrayOf(PropTypes.object): 객체들의 배열이라는 뜻\n    Comments: PropTypes.arrayOf(PropTypes.object),\n    Images: PropTypes.arrayOf(PropTypes.object),\n  }).isRequired\n}\nexport default PostCard"]},"metadata":{},"sourceType":"module"}