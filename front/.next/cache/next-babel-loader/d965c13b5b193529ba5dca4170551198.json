{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n// reducer중심으로 생각.\n// 화면이 아니라 데이터를 먼저 구성.\nimport shortid from 'shortid';\nexport const initialState = {\n  mainPosts: [{\n    id: shortId.generate(),\n    User: {\n      id: 1,\n      nickname: 'seolranlee'\n    },\n    content: '첫 번째 게시글 #해시태그 #익스프레스',\n    Images: [{\n      src: 'https://ccdn.lezhin.com/v2/banners/explore_boys/images/17467.webp?updated=1634792020109'\n    }, {\n      src: 'https://ccdn.lezhin.com/v2/banners/explore_boys/images/17630.webp?updated=1635250994567'\n    }, {\n      src: 'https://ccdn.lezhin.com/v2/banners/explore_boys/images/17303.webp?updated=1634553971673s'\n    }],\n    Comments: [{\n      id: shortId.generate(),\n      User: {\n        nickname: 'user1'\n      },\n      content: '코멘트1'\n    }, {\n      User: {\n        nickname: 'user2'\n      },\n      content: '코멘트2'\n    }]\n  }],\n  imagePaths: [],\n  addPostLoading: false,\n  addPostDone: false,\n  addPostError: null,\n  addCommentLoading: false,\n  addCommentDone: false,\n  addCommentError: null\n}; // 액션 이름을 상수로 빼둔다=>오타확률을 낮춘다\n\nexport const ADD_POST_REQUEST = 'ADD_POST_REQUEST';\nexport const ADD_POST_SUCCESS = 'ADD_POST_SUCCESS';\nexport const ADD_POST_FAILURE = 'ADD_POST_FAILURE';\nexport const ADD_COMMENT_REQUEST = 'ADD_COMMENT_REQUEST';\nexport const ADD_COMMENT_SUCCESS = 'ADD_COMMENT_SUCCESS';\nexport const ADD_COMMENT_FAILURE = 'ADD_COMMENT_FAILURE';\nexport const addPost = data => ({\n  type: ADD_POST_REQUEST,\n  data\n});\nexport const addComment = data => ({\n  type: ADD_COMMENT_REQUEST,\n  data\n});\n\nconst dummyPost = data => ({\n  // 겹치지 않는 랜덤한 아이디를 생성해서 return해주는 npm.\n  id: shortId.generate(),\n  content: data,\n  User: {\n    id: 1,\n    nickname: 'foo'\n  },\n  Images: [],\n  Comments: []\n});\n\nconst dummyComment = data => ({\n  id: shortid.generate(),\n  content: data,\n  User: {\n    id: 1,\n    nickname: 'seolranlee'\n  }\n});\n\nconst reducer = (state = initialState, action) => {\n  switch (action.type) {\n    case ADD_POST_REQUEST:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        addPostLoading: true,\n        addPostDone: false,\n        addPostError: null\n      });\n\n    case ADD_POST_SUCCESS:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        // dummyPost를 앞에다가 추가해줘야 새로운 게시글이 위에 올라간다.\n        mainPosts: [dummyPost(action.data), ...state.mainPosts],\n        addPostLoading: false,\n        addPostDone: true\n      });\n\n    case ADD_POST_FAILURE:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        addPostLoading: true,\n        addPostError: action.error\n      });\n\n    case ADD_COMMENT_REQUEST:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        addCommentLoading: true,\n        addCommentDone: false,\n        addCommentError: null\n      });\n\n    case ADD_COMMENT_SUCCESS:\n      const postIndex = state.mainPosts.findIndex(v => v.id === action.data.postId);\n\n      const post = _objectSpread({}, state.mainPosts[postIndex]);\n\n      post.Comments = [dummyComment(action.data.content), ...post.Comments];\n      const mainPosts = [...state.mainPosts];\n      mainPosts[postIndex] = post;\n      return _objectSpread(_objectSpread({}, state), {}, {\n        mainPosts,\n        addCommentLoading: false,\n        addCommentDone: true\n      });\n\n    case ADD_COMMENT_FAILURE:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        addCommentLoading: true,\n        addCommentError: action.error\n      });\n\n    default:\n      return state;\n  }\n};\n\nexport default reducer;","map":{"version":3,"sources":["/Users/seolranlee/study/react-nodebird/front/reducers/post.js"],"names":["shortid","initialState","mainPosts","id","shortId","generate","User","nickname","content","Images","src","Comments","imagePaths","addPostLoading","addPostDone","addPostError","addCommentLoading","addCommentDone","addCommentError","ADD_POST_REQUEST","ADD_POST_SUCCESS","ADD_POST_FAILURE","ADD_COMMENT_REQUEST","ADD_COMMENT_SUCCESS","ADD_COMMENT_FAILURE","addPost","data","type","addComment","dummyPost","dummyComment","reducer","state","action","error","postIndex","findIndex","v","postId","post"],"mappings":"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","sourcesContent":["// reducer중심으로 생각.\n// 화면이 아니라 데이터를 먼저 구성.\nimport shortid from 'shortid'\n\nexport const initialState = {\n  mainPosts: [{\n    id: shortId.generate(),\n    User: {\n      id: 1,\n      nickname: 'seolranlee'\n    },\n    content: '첫 번째 게시글 #해시태그 #익스프레스',\n    Images: [\n      {\n        src: 'https://ccdn.lezhin.com/v2/banners/explore_boys/images/17467.webp?updated=1634792020109'\n      },\n      {\n        src: 'https://ccdn.lezhin.com/v2/banners/explore_boys/images/17630.webp?updated=1635250994567'\n      },\n      {\n        src: 'https://ccdn.lezhin.com/v2/banners/explore_boys/images/17303.webp?updated=1634553971673s'\n      }\n    ],\n    Comments: [\n      {\n        id: shortId.generate(),\n        User: {\n          nickname: 'user1'\n        },\n        content: '코멘트1'\n      },\n      {\n        User: {\n          nickname: 'user2'\n        },\n        content: '코멘트2'\n      }\n    ]\n  }],\n  imagePaths: [],\n  addPostLoading: false,\n  addPostDone: false,\n  addPostError: null,\n  addCommentLoading: false,\n  addCommentDone: false,\n  addCommentError: null\n}\n\n// 액션 이름을 상수로 빼둔다=>오타확률을 낮춘다\nexport const ADD_POST_REQUEST = 'ADD_POST_REQUEST'\nexport const ADD_POST_SUCCESS = 'ADD_POST_SUCCESS'\nexport const ADD_POST_FAILURE = 'ADD_POST_FAILURE'\n\nexport const ADD_COMMENT_REQUEST = 'ADD_COMMENT_REQUEST'\nexport const ADD_COMMENT_SUCCESS = 'ADD_COMMENT_SUCCESS'\nexport const ADD_COMMENT_FAILURE = 'ADD_COMMENT_FAILURE'\n\nexport const addPost = (data) => ({\n  type: ADD_POST_REQUEST,\n  data\n})\n\nexport const addComment = (data) => ({\n  type: ADD_COMMENT_REQUEST,\n  data\n})\n\nconst dummyPost = (data) => ({\n  // 겹치지 않는 랜덤한 아이디를 생성해서 return해주는 npm.\n  id: shortId.generate(),\n  content: data,\n  User: {\n    id: 1,\n    nickname: 'foo'\n  },\n  Images: [],\n  Comments: []\n})\n\nconst dummyComment = (data) => ({\n  id: shortid.generate(),\n  content: data,\n  User: {\n    id: 1,\n    nickname: 'seolranlee'\n  }\n})\nconst reducer = (state = initialState, action) => {\n  switch (action.type) {\n    case ADD_POST_REQUEST:\n      return {\n        ...state,\n        addPostLoading: true,\n        addPostDone: false,\n        addPostError: null\n      }\n    case ADD_POST_SUCCESS:\n      return {\n        ...state,\n        // dummyPost를 앞에다가 추가해줘야 새로운 게시글이 위에 올라간다.\n        mainPosts: [dummyPost(action.data), ...state.mainPosts],\n        addPostLoading: false,\n        addPostDone: true\n      }\n    case ADD_POST_FAILURE:\n      return {\n        ...state,\n        addPostLoading: true,\n        addPostError: action.error\n      }\n    case ADD_COMMENT_REQUEST:\n      return {\n        ...state,\n        addCommentLoading: true,\n        addCommentDone: false,\n        addCommentError: null\n      }\n    case ADD_COMMENT_SUCCESS:\n      const postIndex = state.mainPosts.findIndex((v) => v.id === action.data.postId)\n      const post = {...state.mainPosts[postIndex]}\n      post.Comments =  [dummyComment(action.data.content), ...post.Comments]\n      const mainPosts = [...state.mainPosts]\n      mainPosts[postIndex] = post\n      return {\n        ...state,\n        mainPosts,\n        addCommentLoading: false,\n        addCommentDone: true\n      }\n    case ADD_COMMENT_FAILURE:\n      return {\n        ...state,\n        addCommentLoading: true,\n        addCommentError: action.error\n      }\n    default:\n      return state\n  }\n}\n\nexport default reducer"]},"metadata":{},"sourceType":"module"}