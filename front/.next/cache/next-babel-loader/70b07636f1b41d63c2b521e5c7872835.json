{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\n\nvar _marked = /*#__PURE__*/_regeneratorRuntime.mark(addPost),\n    _marked2 = /*#__PURE__*/_regeneratorRuntime.mark(removePost),\n    _marked3 = /*#__PURE__*/_regeneratorRuntime.mark(addComment),\n    _marked4 = /*#__PURE__*/_regeneratorRuntime.mark(watchAddPosts),\n    _marked5 = /*#__PURE__*/_regeneratorRuntime.mark(watchRemovePosts),\n    _marked6 = /*#__PURE__*/_regeneratorRuntime.mark(watchAddComment),\n    _marked7 = /*#__PURE__*/_regeneratorRuntime.mark(postSaga);\n\nimport { all, fork, call, put, takeLatest, delay } from \"@redux-saga/core/effects\";\nimport axios from 'axios';\nimport { ADD_POST_REQUEST, ADD_POST_SUCCESS, ADD_POST_FAILURE, ADD_COMMENT_REQUEST, ADD_COMMENT_SUCCESS, ADD_COMMENT_FAILURE, REMOVE_POST_REQUEST } from \"../reducers/post\";\nimport { ADD_POST_TO_ME, REMOVE_POST_OF_ME } from \"../reducers/user\";\nimport shortId from 'shortid'; // addPost\n\nfunction addPostAPI(data) {\n  return axios.post('/api/post', data);\n}\n\nfunction addPost(action) {\n  var id;\n  return _regeneratorRuntime.wrap(function addPost$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.prev = 0;\n          _context.next = 3;\n          return delay(1000);\n\n        case 3:\n          // 겹치지 않는 랜덤한 아이디를 생성해서 return해주는 npm.\n          id = shortId.generate(); // post reducer 상태 변경\n\n          _context.next = 6;\n          return put({\n            type: ADD_POST_SUCCESS,\n            data: {\n              id: id,\n              content: action.data\n            }\n          });\n\n        case 6:\n          _context.next = 8;\n          return put({\n            type: ADD_POST_TO_ME,\n            data: id\n          });\n\n        case 8:\n          _context.next = 14;\n          break;\n\n        case 10:\n          _context.prev = 10;\n          _context.t0 = _context[\"catch\"](0);\n          _context.next = 14;\n          return put({\n            type: ADD_POST_FAILURE,\n            error: _context.t0.response.data\n          });\n\n        case 14:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, _marked, null, [[0, 10]]);\n} // removePost\n\n\nfunction removePostAPI(data) {\n  return axios[\"delete\"]('/api/post', data);\n}\n\nfunction removePost(action) {\n  var id;\n  return _regeneratorRuntime.wrap(function removePost$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          _context2.prev = 0;\n          _context2.next = 3;\n          return delay(1000);\n\n        case 3:\n          // 겹치지 않는 랜덤한 아이디를 생성해서 return해주는 npm.\n          id = shortId.generate();\n          _context2.next = 6;\n          return put({\n            type: REMOVE_POST_SUCCESS,\n            data: action.dtaa\n          });\n\n        case 6:\n          _context2.next = 8;\n          return put({\n            type: REMOVE_POST_OF_ME,\n            data: action.data\n          });\n\n        case 8:\n          _context2.next = 14;\n          break;\n\n        case 10:\n          _context2.prev = 10;\n          _context2.t0 = _context2[\"catch\"](0);\n          _context2.next = 14;\n          return put({\n            type: REMOVE_POST_FAILURE,\n            error: _context2.t0.response.data\n          });\n\n        case 14:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, _marked2, null, [[0, 10]]);\n} // addComment\n\n\nfunction addCommentAPI(data) {\n  return axios.Comment('/api/post/${data.postId}/comment', data);\n}\n\nfunction addComment(action) {\n  return _regeneratorRuntime.wrap(function addComment$(_context3) {\n    while (1) {\n      switch (_context3.prev = _context3.next) {\n        case 0:\n          _context3.prev = 0;\n          _context3.next = 3;\n          return delay(1000);\n\n        case 3:\n          _context3.next = 5;\n          return put({\n            type: ADD_COMMENT_SUCCESS,\n            data: action.data\n          });\n\n        case 5:\n          _context3.next = 11;\n          break;\n\n        case 7:\n          _context3.prev = 7;\n          _context3.t0 = _context3[\"catch\"](0);\n          _context3.next = 11;\n          return put({\n            type: ADD_COMMENT_FAILURE,\n            error: _context3.t0.response.data\n          });\n\n        case 11:\n        case \"end\":\n          return _context3.stop();\n      }\n    }\n  }, _marked3, null, [[0, 7]]);\n}\n\nfunction watchAddPosts() {\n  return _regeneratorRuntime.wrap(function watchAddPosts$(_context4) {\n    while (1) {\n      switch (_context4.prev = _context4.next) {\n        case 0:\n          _context4.next = 2;\n          return takeLatest(ADD_POST_REQUEST, addPost);\n\n        case 2:\n        case \"end\":\n          return _context4.stop();\n      }\n    }\n  }, _marked4);\n}\n\nfunction watchRemovePosts() {\n  return _regeneratorRuntime.wrap(function watchRemovePosts$(_context5) {\n    while (1) {\n      switch (_context5.prev = _context5.next) {\n        case 0:\n          _context5.next = 2;\n          return takeLatest(REMOVE_POST_REQUEST, addPost);\n\n        case 2:\n        case \"end\":\n          return _context5.stop();\n      }\n    }\n  }, _marked5);\n}\n\nfunction watchAddComment() {\n  return _regeneratorRuntime.wrap(function watchAddComment$(_context6) {\n    while (1) {\n      switch (_context6.prev = _context6.next) {\n        case 0:\n          _context6.next = 2;\n          return takeLatest(ADD_COMMENT_REQUEST, addComment);\n\n        case 2:\n        case \"end\":\n          return _context6.stop();\n      }\n    }\n  }, _marked6);\n}\n\nexport default function postSaga() {\n  return _regeneratorRuntime.wrap(function postSaga$(_context7) {\n    while (1) {\n      switch (_context7.prev = _context7.next) {\n        case 0:\n          _context7.next = 2;\n          return all([fork(watchAddPosts), fork(watchRemovePosts), fork(watchAddComment)]);\n\n        case 2:\n        case \"end\":\n          return _context7.stop();\n      }\n    }\n  }, _marked7);\n}","map":{"version":3,"sources":["/Users/seolranlee/study/react-nodebird/front/sagas/post.js"],"names":["addPost","removePost","addComment","watchAddPosts","watchRemovePosts","watchAddComment","postSaga","all","fork","call","put","takeLatest","delay","axios","ADD_POST_REQUEST","ADD_POST_SUCCESS","ADD_POST_FAILURE","ADD_COMMENT_REQUEST","ADD_COMMENT_SUCCESS","ADD_COMMENT_FAILURE","REMOVE_POST_REQUEST","ADD_POST_TO_ME","REMOVE_POST_OF_ME","shortId","addPostAPI","data","post","action","id","generate","type","content","error","response","removePostAPI","REMOVE_POST_SUCCESS","dtaa","REMOVE_POST_FAILURE","addCommentAPI","Comment"],"mappings":"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","sourcesContent":["import { all, fork, call, put, takeLatest, delay } from \"@redux-saga/core/effects\";\nimport axios from 'axios'\nimport { \n  ADD_POST_REQUEST, ADD_POST_SUCCESS, ADD_POST_FAILURE,\n  ADD_COMMENT_REQUEST, ADD_COMMENT_SUCCESS, ADD_COMMENT_FAILURE, REMOVE_POST_REQUEST \n} from \"../reducers/post\";\nimport { ADD_POST_TO_ME, REMOVE_POST_OF_ME } from \"../reducers/user\";\nimport shortId from 'shortid'\n\n// addPost\nfunction addPostAPI(data) {\n  return axios.post('/api/post', data)\n}\n\nfunction* addPost(action) {\n  try {\n    // const result = yield call(addPostAPI, action.data)\n    yield delay(1000)\n    // 겹치지 않는 랜덤한 아이디를 생성해서 return해주는 npm.\n    const id = shortId.generate()\n    // post reducer 상태 변경\n    yield put({\n      type: ADD_POST_SUCCESS,\n      data: {\n        id,\n        content: action.data\n      }\n    })\n    // ADD_POST_SUCCESS 후 \n    // saga는 동시에 여러 액션을 dispatch할 수 있다.\n    // user reducer 상태 변경\n    yield put({\n      type: ADD_POST_TO_ME,\n      data: id\n    })\n  } catch (err) {\n    yield put({\n      type: ADD_POST_FAILURE,\n      error: err.response.data\n    })\n  }\n}\n\n// removePost\nfunction removePostAPI(data) {\n  return axios.delete('/api/post', data)\n}\n\nfunction* removePost(action) {\n  try {\n    // const result = yield call(addPostAPI, action.data)\n    yield delay(1000)\n    // 겹치지 않는 랜덤한 아이디를 생성해서 return해주는 npm.\n    const id = shortId.generate()\n    yield put({\n      type: REMOVE_POST_SUCCESS,\n      data: action.dtaa\n    })\n    // ADD_POST_SUCCESS 후 \n    // saga는 동시에 여러 액션을 dispatch할 수 있다.\n    yield put({\n      type: REMOVE_POST_OF_ME,\n      data: action.data\n    })\n  } catch (err) {\n    yield put({\n      type: REMOVE_POST_FAILURE,\n      error: err.response.data\n    })\n  }\n}\n\n// addComment\nfunction addCommentAPI(data) {\n  return axios.Comment('/api/post/${data.postId}/comment', data)\n}\n\nfunction* addComment(action) {\n  try {\n    // const result = yield call(addCommentAPI, action.data)\n    yield delay(1000)\n    yield put({\n      type: ADD_COMMENT_SUCCESS,\n      data: action.data\n    })\n  } catch (err) {\n    yield put({\n      type: ADD_COMMENT_FAILURE,\n      error: err.response.data\n    })\n  }\n}\n\nfunction* watchAddPosts() {\n  yield takeLatest(ADD_POST_REQUEST, addPost)\n}\n\nfunction* watchRemovePosts() {\n  yield takeLatest(REMOVE_POST_REQUEST, addPost)\n}\n\nfunction* watchAddComment() {\n  yield takeLatest(ADD_COMMENT_REQUEST, addComment)\n}\n\nexport default function* postSaga() {\n  yield all([\n    fork(watchAddPosts),\n    fork(watchRemovePosts),\n    fork(watchAddComment)\n  ])\n}"]},"metadata":{},"sourceType":"module"}