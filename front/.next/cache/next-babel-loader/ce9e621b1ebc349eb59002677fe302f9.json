{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\n\nvar _marked = /*#__PURE__*/_regeneratorRuntime.mark(logIn),\n    _marked2 = /*#__PURE__*/_regeneratorRuntime.mark(watchLogin),\n    _marked3 = /*#__PURE__*/_regeneratorRuntime.mark(logOut),\n    _marked4 = /*#__PURE__*/_regeneratorRuntime.mark(watchLogOut),\n    _marked5 = /*#__PURE__*/_regeneratorRuntime.mark(userSaga);\n\nimport { all, fork, call, put, takeLatest, delay } from \"@redux-saga/core/effects\";\nimport axios from 'axios';\nimport '../reducers/user'; // 서버에 요청하는 함수는 일반 함수!!!\n// login\n\nfunction loginAPI(data) {\n  return axios.post('/api/login', data);\n}\n\nfunction logIn(action) {\n  return _regeneratorRuntime.wrap(function logIn$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.prev = 0;\n          console.log('saga login'); // call: 동기 함수 호출: 결과값을 기다리고 다음 줄로 넘어간다. await이랑 비슷하다고 생각\n          // fork: 비동기 함수 호출(non-blocking): 결과값을 기다리지 않고 다음 줄로 넘어간다.\n          // const result = yield call(loginAPI, action.data) // call을 써야 한다!!\n\n          _context.next = 4;\n          return delay(1000);\n\n        case 4:\n          _context.next = 6;\n          return put( // action 객체\n          {\n            type: LOG_IN_SUCCESS,\n            data: action.data\n          });\n\n        case 6:\n          _context.next = 12;\n          break;\n\n        case 8:\n          _context.prev = 8;\n          _context.t0 = _context[\"catch\"](0);\n          _context.next = 12;\n          return put({\n            type: LOG_IN_FAILURE,\n            error: _context.t0.response.data\n          });\n\n        case 12:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, _marked, null, [[0, 8]]);\n}\n\nfunction watchLogin() {\n  return _regeneratorRuntime.wrap(function watchLogin$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          _context2.next = 2;\n          return takeLatest(LOG_IN_REQUEST, logIn);\n\n        case 2:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, _marked2);\n} // logout\n\n\nfunction logoutAPI() {\n  return axios.post('/api/logout');\n}\n\nfunction logOut() {\n  return _regeneratorRuntime.wrap(function logOut$(_context3) {\n    while (1) {\n      switch (_context3.prev = _context3.next) {\n        case 0:\n          _context3.prev = 0;\n          console.log('saga loginOut'); // const result = yield call(logoutAPI)\n\n          _context3.next = 4;\n          return delay(1000);\n\n        case 4:\n          _context3.next = 6;\n          return put({\n            type: LOG_OUT_SUCCESS\n          });\n\n        case 6:\n          _context3.next = 12;\n          break;\n\n        case 8:\n          _context3.prev = 8;\n          _context3.t0 = _context3[\"catch\"](0);\n          _context3.next = 12;\n          return put({\n            type: LOG_OUT_FAILURE,\n            error: _context3.t0.response.data\n          });\n\n        case 12:\n        case \"end\":\n          return _context3.stop();\n      }\n    }\n  }, _marked3, null, [[0, 8]]);\n}\n\nfunction watchLogOut() {\n  return _regeneratorRuntime.wrap(function watchLogOut$(_context4) {\n    while (1) {\n      switch (_context4.prev = _context4.next) {\n        case 0:\n          _context4.next = 2;\n          return takeLatest(LOG_OUT_REQUEST, logOut);\n\n        case 2:\n        case \"end\":\n          return _context4.stop();\n      }\n    }\n  }, _marked4);\n}\n\nexport default function userSaga() {\n  return _regeneratorRuntime.wrap(function userSaga$(_context5) {\n    while (1) {\n      switch (_context5.prev = _context5.next) {\n        case 0:\n          _context5.next = 2;\n          return all([fork(watchLogin), fork(watchLogOut)]);\n\n        case 2:\n        case \"end\":\n          return _context5.stop();\n      }\n    }\n  }, _marked5);\n}","map":{"version":3,"sources":["/Users/seolranlee/study/react-nodebird/front/sagas/user.js"],"names":["logIn","watchLogin","logOut","watchLogOut","userSaga","all","fork","call","put","takeLatest","delay","axios","loginAPI","data","post","action","console","log","type","LOG_IN_SUCCESS","LOG_IN_FAILURE","error","response","LOG_IN_REQUEST","logoutAPI","LOG_OUT_SUCCESS","LOG_OUT_FAILURE","LOG_OUT_REQUEST"],"mappings":";;oDAUUA,K;qDA0BAC,U;qDA2BAC,M;qDAgBAC,W;qDAIeC,Q;;AAnFzB,SAASC,GAAT,EAAcC,IAAd,EAAoBC,IAApB,EAA0BC,GAA1B,EAA+BC,UAA/B,EAA2CC,KAA3C,QAAwD,0BAAxD;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,OAAgB,kBAAhB,C,CAEA;AACA;;AACA,SAASC,QAAT,CAAkBC,IAAlB,EAAwB;AACtB,SAAOF,KAAK,CAACG,IAAN,CAAW,YAAX,EAAyBD,IAAzB,CAAP;AACD;;AAED,SAAUb,KAAV,CAAgBe,MAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAEIC,UAAAA,OAAO,CAACC,GAAR,CAAY,YAAZ,EAFJ,CAGI;AACA;AACA;;AALJ;AAOI,iBAAMP,KAAK,CAAC,IAAD,CAAX;;AAPJ;AAAA;AAUI,iBAAMF,GAAG,EACP;AACA;AACEU,YAAAA,IAAI,EAAEC,cADR;AAEEN,YAAAA,IAAI,EAAEE,MAAM,CAACF;AAFf,WAFO,CAAT;;AAVJ;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAmBI,iBAAML,GAAG,CAAC;AACRU,YAAAA,IAAI,EAAEE,cADE;AAERC,YAAAA,KAAK,EAAE,YAAIC,QAAJ,CAAaT;AAFZ,WAAD,CAAT;;AAnBJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AA0BA,SAAUZ,UAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAeE,iBAAMQ,UAAU,CAACc,cAAD,EAAiBvB,KAAjB,CAAhB;;AAfF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,C,CAsBA;;;AACA,SAASwB,SAAT,GAAqB;AACnB,SAAOb,KAAK,CAACG,IAAN,CAAW,aAAX,CAAP;AACD;;AAED,SAAUZ,MAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAEIc,UAAAA,OAAO,CAACC,GAAR,CAAY,eAAZ,EAFJ,CAGI;;AAHJ;AAII,iBAAMP,KAAK,CAAC,IAAD,CAAX;;AAJJ;AAAA;AAKI,iBAAMF,GAAG,CAAC;AACRU,YAAAA,IAAI,EAAEO;AADE,WAAD,CAAT;;AALJ;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AASI,iBAAMjB,GAAG,CAAC;AACRU,YAAAA,IAAI,EAAEQ,eADE;AAERL,YAAAA,KAAK,EAAE,aAAIC,QAAJ,CAAaT;AAFZ,WAAD,CAAT;;AATJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAgBA,SAAUV,WAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AACE,iBAAMM,UAAU,CAACkB,eAAD,EAAkBzB,MAAlB,CAAhB;;AADF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAIA,eAAe,SAAUE,QAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AACb,iBAAMC,GAAG,CAAC,CACRC,IAAI,CAACL,UAAD,CADI,EAERK,IAAI,CAACH,WAAD,CAFI,CAAD,CAAT;;AADa;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA","sourcesContent":["import { all, fork, call, put, takeLatest, delay } from \"@redux-saga/core/effects\";\nimport axios from 'axios'\nimport { } from '../reducers/user'\n\n// 서버에 요청하는 함수는 일반 함수!!!\n// login\nfunction loginAPI(data) {\n  return axios.post('/api/login', data)\n}\n\nfunction* logIn(action) {\n  try {\n    console.log('saga login')\n    // call: 동기 함수 호출: 결과값을 기다리고 다음 줄로 넘어간다. await이랑 비슷하다고 생각\n    // fork: 비동기 함수 호출(non-blocking): 결과값을 기다리지 않고 다음 줄로 넘어간다.\n    // const result = yield call(loginAPI, action.data) // call을 써야 한다!!\n\n    yield delay(1000) // 서버 구현 전까지 비동기적인 효과를 위해\n    // effect앞에는 항상 yield를 붙인다.\n    // put은 dispatch.\n    yield put(\n      // action 객체\n      {\n        type: LOG_IN_SUCCESS,\n        data: action.data\n      }\n    )\n    // const result = yield fork(loginAPI)\n  } catch (err) {\n    yield put({\n      type: LOG_IN_FAILURE,\n      error: err.response.data\n    })\n  }\n}\n\nfunction* watchLogin() {\n  // 'LOGIN'이라는 액션이 들어오면 logIn generator 함수를 실행한다.\n  // eventListner와 유사한 느낌\n  // yield take의 치명적인 단점: 1회용임. 한번 로그인 후에는 사라진다. 해결하는 방법? => generator 무한\n  // yield take('LOG_IN_REQUEST', logIn)\n  \n  // while (true) {  // while로 감싸면 무한하게 실행된다.\n  //   yield take('LOG_IN_REQUEST', logIn)\n  // }\n  \n  // while take는 동기적으로 동작하지만 takeEvery는 비동기적으로 동작\n  // yield takeEvery('LOG_IN_REQUEST', logIn)\n\n  // takeLatest: 사용자가 오동작으로 2회 이상 눌렀을 때, takeEvery는 2회 모두 실행된다면 takeLatest는 앞의 오동작은 무시되고 마지막 것만 동작. 보통은 takeLatest를 많이 해둔다.\n  // 치명적 단점: 응답을 취소하지 서버에 보내는 요청을 취소하진 못함 => 보통 서버쪽에서 검증하는 편. 그래서 보통 클라이언트에서는 takeLatest를 주로 쓴다.\n  yield takeLatest(LOG_IN_REQUEST, logIn)\n\n  // 2초동안에 로그인은 한번만 요청\n  // yield throttle('LOG_IN_REQUEST', logIn, 2000)\n\n}\n\n// logout\nfunction logoutAPI() {\n  return axios.post('/api/logout')\n}\n\nfunction* logOut() {\n  try {\n    console.log('saga loginOut')\n    // const result = yield call(logoutAPI)\n    yield delay(1000)\n    yield put({\n      type: LOG_OUT_SUCCESS,\n    })\n  } catch (err) {\n    yield put({\n      type: LOG_OUT_FAILURE,\n      error: err.response.data\n    })\n  }\n}\n\nfunction* watchLogOut() {\n  yield takeLatest(LOG_OUT_REQUEST, logOut)\n}\n\nexport default function* userSaga() {\n  yield all([\n    fork(watchLogin),\n    fork(watchLogOut),\n  ])\n}"]},"metadata":{},"sourceType":"module"}