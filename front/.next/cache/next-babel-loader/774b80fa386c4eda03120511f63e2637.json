{"ast":null,"code":"// configureStore.js\nimport { createWrapper } from 'next-redux-wrapper';\nimport { applyMiddleware, compose, createStore } from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport createSagaMiddleware from '@redux-saga/core';\nimport reducer from '../reducers';\nimport rootSaga from '../sagas';\n\nconst loggerMiddleware = ({\n  dispatch,\n  getState\n}) => next => action => {\n  console.log(action);\n  return next(action);\n};\n\nconst configureStore = () => {\n  const sagaMiddleware = createSagaMiddleware();\n  const middlewares = [sagaMiddleware, loggerMiddleware];\n  const enhancer = false ? compose(applyMiddleware(...middlewares)) : composeWithDevTools(applyMiddleware(...middlewares));\n  const store = createStore(reducer, enhancer);\n  store.sagaTask = sagaMiddleware.run(rootSaga);\n  return store;\n};\n\nconst wrapper = createWrapper(configureStore, {\n  debug: true\n});\nexport default wrapper;","map":{"version":3,"sources":["/Users/seolranlee/study/react-nodebird/front/store/configureStore.js"],"names":["createWrapper","applyMiddleware","compose","createStore","composeWithDevTools","createSagaMiddleware","reducer","rootSaga","loggerMiddleware","dispatch","getState","next","action","console","log","configureStore","sagaMiddleware","middlewares","enhancer","store","sagaTask","run","wrapper","debug"],"mappings":"AAAA;AACA,SAASA,aAAT,QAA8B,oBAA9B;AACA,SAASC,eAAT,EAA0BC,OAA1B,EAAmCC,WAAnC,QAAsD,OAAtD;AACA,SAASC,mBAAT,QAAoC,0BAApC;AACA,OAAOC,oBAAP,MAAiC,kBAAjC;AAEA,OAAOC,OAAP,MAAoB,aAApB;AACA,OAAOC,QAAP,MAAqB,UAArB;;AAEA,MAAMC,gBAAgB,GAAG,CAAC;AAAEC,EAAAA,QAAF;AAAYC,EAAAA;AAAZ,CAAD,KAA6BC,IAAD,IAAWC,MAAD,IAAY;AACzEC,EAAAA,OAAO,CAACC,GAAR,CAAYF,MAAZ;AACA,SAAOD,IAAI,CAACC,MAAD,CAAX;AACD,CAHD;;AAKA,MAAMG,cAAc,GAAG,MAAM;AAC3B,QAAMC,cAAc,GAAGX,oBAAoB,EAA3C;AACA,QAAMY,WAAW,GAAG,CAACD,cAAD,EAAiBR,gBAAjB,CAApB;AACA,QAAMU,QAAQ,GAAG,QACbhB,OAAO,CAACD,eAAe,CAAC,GAAGgB,WAAJ,CAAhB,CADM,GAEbb,mBAAmB,CAACH,eAAe,CAAC,GAAGgB,WAAJ,CAAhB,CAFvB;AAGA,QAAME,KAAK,GAAGhB,WAAW,CAACG,OAAD,EAAUY,QAAV,CAAzB;AACAC,EAAAA,KAAK,CAACC,QAAN,GAAiBJ,cAAc,CAACK,GAAf,CAAmBd,QAAnB,CAAjB;AACA,SAAOY,KAAP;AACD,CATD;;AAWA,MAAMG,OAAO,GAAGtB,aAAa,CAACe,cAAD,EAAiB;AAC5CQ,EAAAA,KAAK;AADuC,CAAjB,CAA7B;AAIA,eAAeD,OAAf","sourcesContent":["// configureStore.js\nimport { createWrapper } from 'next-redux-wrapper'\nimport { applyMiddleware, compose, createStore } from 'redux'\nimport { composeWithDevTools } from 'redux-devtools-extension'\nimport createSagaMiddleware from '@redux-saga/core'\n\nimport reducer from '../reducers'\nimport rootSaga from '../sagas'\n\nconst loggerMiddleware = ({ dispatch, getState }) => (next) => (action) => {\n  console.log(action)\n  return next(action)\n} \n\nconst configureStore = () => {\n  const sagaMiddleware = createSagaMiddleware()\n  const middlewares = [sagaMiddleware, loggerMiddleware]\n  const enhancer = process.env.NODE_ENV === 'production' \n    ? compose(applyMiddleware(...middlewares)) \n    : composeWithDevTools(applyMiddleware(...middlewares))\n  const store = createStore(reducer, enhancer)\n  store.sagaTask = sagaMiddleware.run(rootSaga)\n  return store\n}\n\nconst wrapper = createWrapper(configureStore, { \n  debug: process.env.NODE_ENV === 'development'\n})\n\nexport default wrapper"]},"metadata":{},"sourceType":"module"}